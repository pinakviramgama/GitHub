'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defaultSxProp = require('../utils/defaultSxProp.js');
var reactIs = require('react-is');
var SegmentedControl_module = require('./SegmentedControl.module.css.js');
var clsx = require('clsx');
var BoxWithFallback = require('../internal/components/BoxWithFallback.js');
var jsxRuntime = require('react/jsx-runtime');
var useFeatureFlag = require('../FeatureFlags/useFeatureFlag.js');
var Tooltip = require('../TooltipV2/Tooltip.js');

const SegmentedControlIconButton = ({
  'aria-label': ariaLabel,
  icon: Icon,
  selected,
  sx: sxProp = defaultSxProp.defaultSxProp,
  className,
  description,
  tooltipDirection,
  ...rest
}) => {
  const tooltipFlagEnabled = useFeatureFlag.useFeatureFlag('primer_react_segmented_control_tooltip');
  if (tooltipFlagEnabled) {
    return /*#__PURE__*/jsxRuntime.jsx(BoxWithFallback.BoxWithFallback, {
      as: "li",
      sx: sxProp,
      className: clsx.clsx(SegmentedControl_module.Item, className),
      "data-selected": selected || undefined,
      children: /*#__PURE__*/jsxRuntime.jsx(Tooltip.Tooltip, {
        type: description ? undefined : 'label',
        text: description ? description : ariaLabel,
        direction: tooltipDirection,
        children: /*#__PURE__*/jsxRuntime.jsx(BoxWithFallback.BoxWithFallback, {
          as: "button",
          "aria-current": selected
          // If description is provided, we will use the tooltip to describe the button, so we need to keep the aria-label to label the button.
          ,
          "aria-label": description ? ariaLabel : undefined,
          className: clsx.clsx(SegmentedControl_module.Button, SegmentedControl_module.IconButton),
          ...rest,
          children: /*#__PURE__*/jsxRuntime.jsx("span", {
            className: clsx.clsx(SegmentedControl_module.Content, 'segmentedControl-content'),
            children: reactIs.isElement(Icon) ? Icon : /*#__PURE__*/jsxRuntime.jsx(Icon, {})
          })
        })
      })
    });
  } else {
    // This can be removed when primer_react_segmented_control_tooltip feature flag is GA-ed.
    return /*#__PURE__*/jsxRuntime.jsx(BoxWithFallback.BoxWithFallback, {
      as: "li",
      sx: sxProp,
      className: clsx.clsx(SegmentedControl_module.Item, className),
      "data-selected": selected || undefined,
      children: /*#__PURE__*/jsxRuntime.jsx(BoxWithFallback.BoxWithFallback, {
        as: "button",
        "aria-label": ariaLabel,
        "aria-current": selected,
        className: clsx.clsx(SegmentedControl_module.Button, SegmentedControl_module.IconButton),
        ...rest,
        children: /*#__PURE__*/jsxRuntime.jsx("span", {
          className: clsx.clsx(SegmentedControl_module.Content, 'segmentedControl-content'),
          children: reactIs.isElement(Icon) ? Icon : /*#__PURE__*/jsxRuntime.jsx(Icon, {})
        })
      })
    });
  }
};

exports.SegmentedControlIconButton = SegmentedControlIconButton;
exports.default = SegmentedControlIconButton;
