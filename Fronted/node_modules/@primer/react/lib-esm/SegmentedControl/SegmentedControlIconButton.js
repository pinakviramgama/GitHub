import { defaultSxProp } from '../utils/defaultSxProp.js';
import { isElement } from 'react-is';
import classes from './SegmentedControl.module.css.js';
import { clsx } from 'clsx';
import { BoxWithFallback } from '../internal/components/BoxWithFallback.js';
import { jsx } from 'react/jsx-runtime';
import { useFeatureFlag } from '../FeatureFlags/useFeatureFlag.js';
import { Tooltip } from '../TooltipV2/Tooltip.js';

const SegmentedControlIconButton = ({
  'aria-label': ariaLabel,
  icon: Icon,
  selected,
  sx: sxProp = defaultSxProp,
  className,
  description,
  tooltipDirection,
  ...rest
}) => {
  const tooltipFlagEnabled = useFeatureFlag('primer_react_segmented_control_tooltip');
  if (tooltipFlagEnabled) {
    return /*#__PURE__*/jsx(BoxWithFallback, {
      as: "li",
      sx: sxProp,
      className: clsx(classes.Item, className),
      "data-selected": selected || undefined,
      children: /*#__PURE__*/jsx(Tooltip, {
        type: description ? undefined : 'label',
        text: description ? description : ariaLabel,
        direction: tooltipDirection,
        children: /*#__PURE__*/jsx(BoxWithFallback, {
          as: "button",
          "aria-current": selected
          // If description is provided, we will use the tooltip to describe the button, so we need to keep the aria-label to label the button.
          ,
          "aria-label": description ? ariaLabel : undefined,
          className: clsx(classes.Button, classes.IconButton),
          ...rest,
          children: /*#__PURE__*/jsx("span", {
            className: clsx(classes.Content, 'segmentedControl-content'),
            children: isElement(Icon) ? Icon : /*#__PURE__*/jsx(Icon, {})
          })
        })
      })
    });
  } else {
    // This can be removed when primer_react_segmented_control_tooltip feature flag is GA-ed.
    return /*#__PURE__*/jsx(BoxWithFallback, {
      as: "li",
      sx: sxProp,
      className: clsx(classes.Item, className),
      "data-selected": selected || undefined,
      children: /*#__PURE__*/jsx(BoxWithFallback, {
        as: "button",
        "aria-label": ariaLabel,
        "aria-current": selected,
        className: clsx(classes.Button, classes.IconButton),
        ...rest,
        children: /*#__PURE__*/jsx("span", {
          className: clsx(classes.Content, 'segmentedControl-content'),
          children: isElement(Icon) ? Icon : /*#__PURE__*/jsx(Icon, {})
        })
      })
    });
  }
};

export { SegmentedControlIconButton, SegmentedControlIconButton as default };
