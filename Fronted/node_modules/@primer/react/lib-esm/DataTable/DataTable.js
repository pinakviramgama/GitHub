import { useTable } from './useTable.js';
import { Table, TableHead, TableRow, TableSortHeader, TableHeader, TableBody, TableCell } from './Table.js';
import { jsxs, jsx } from 'react/jsx-runtime';

function defaultGetRowId(row) {
  return row.id;
}
function DataTable({
  'aria-labelledby': labelledby,
  'aria-describedby': describedby,
  cellPadding,
  columns,
  data,
  initialSortColumn,
  initialSortDirection,
  getRowId = defaultGetRowId,
  onToggleSort
}) {
  const {
    headers,
    rows,
    actions,
    gridTemplateColumns
  } = useTable({
    data,
    columns,
    initialSortColumn,
    initialSortDirection,
    getRowId
  });
  return /*#__PURE__*/jsxs(Table, {
    "aria-labelledby": labelledby,
    "aria-describedby": describedby,
    cellPadding: cellPadding,
    gridTemplateColumns: gridTemplateColumns,
    children: [/*#__PURE__*/jsx(TableHead, {
      children: /*#__PURE__*/jsx(TableRow, {
        children: headers.map(header => {
          if (header.isSortable()) {
            return /*#__PURE__*/jsx(TableSortHeader, {
              align: header.column.align,
              direction: header.getSortDirection(),
              onToggleSort: () => {
                const nextDirection = header.getSortDirection() === 'ASC' ? 'DESC' : 'ASC';
                actions.sortBy(header);
                onToggleSort === null || onToggleSort === void 0 ? void 0 : onToggleSort(header.id, nextDirection);
              },
              children: typeof header.column.header === 'string' ? header.column.header : header.column.header()
            }, header.id);
          }
          return /*#__PURE__*/jsx(TableHeader, {
            align: header.column.align,
            children: typeof header.column.header === 'string' ? header.column.header : header.column.header()
          }, header.id);
        })
      })
    }), /*#__PURE__*/jsx(TableBody, {
      children: rows.map(row => {
        return /*#__PURE__*/jsx(TableRow, {
          children: row.getCells().map(cell => {
            return /*#__PURE__*/jsx(TableCell, {
              scope: cell.rowHeader ? 'row' : undefined,
              align: cell.column.align,
              children: cell.column.renderCell ? cell.column.renderCell(row.getValue()) : cell.getValue()
            }, cell.id);
          })
        }, row.id);
      })
    })]
  });
}
DataTable.displayName = "DataTable";

export { DataTable };
