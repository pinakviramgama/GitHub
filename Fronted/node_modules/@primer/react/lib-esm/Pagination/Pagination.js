import React from 'react';
import { buildPaginationModel, buildComponentData } from './model.js';
import { viewportRanges } from '../hooks/useResponsiveValue.js';
import { clsx } from 'clsx';
import classes from './Pagination.module.css.js';
import { BoxWithFallback } from '../internal/components/BoxWithFallback.js';
import { jsx } from 'react/jsx-runtime';
import Box from '../Box/Box.js';

const getViewportRangesToHidePages = showPages => {
  if (showPages && typeof showPages !== 'boolean') {
    return Object.keys(showPages).filter(key => !showPages[key]);
  }
  if (showPages) {
    return [];
  } else {
    return Object.keys(viewportRanges);
  }
};
function usePaginationPages({
  theme,
  pageCount,
  currentPage,
  onPageChange,
  hrefBuilder,
  marginPageCount,
  showPages,
  surroundingPageCount,
  renderPage
}) {
  const pageChange = React.useCallback(n => e => onPageChange(e, n), [onPageChange]);
  const model = React.useMemo(() => {
    return buildPaginationModel(pageCount, currentPage, !!showPages, marginPageCount, surroundingPageCount);
  }, [pageCount, currentPage, showPages, marginPageCount, surroundingPageCount]);
  const children = React.useMemo(() => {
    return model.map(page => {
      const {
        props,
        key,
        content
      } = buildComponentData(page, hrefBuilder, pageChange(page.num));
      if (renderPage && props.as !== 'span') {
        return renderPage({
          key,
          children: content,
          number: page.num,
          className: classes.Page,
          ...props
        });
      }
      return (
        /*#__PURE__*/
        // @ts-ignore giving me grief about children and "as" props
        jsx(BoxWithFallback, {
          as: "a",
          theme: theme,
          className: clsx(classes.Page),
          ...props,
          children: content
        }, key)
      );
    });
  }, [model, hrefBuilder, pageChange, renderPage, theme]);
  return children;
}
function Pagination({
  className,
  theme: _theme,
  pageCount,
  currentPage,
  onPageChange = noop,
  hrefBuilder = defaultHrefBuilder,
  marginPageCount = 1,
  showPages = true,
  surroundingPageCount = 2,
  renderPage,
  ...rest
}) {
  const pageElements = usePaginationPages({
    theme: _theme,
    pageCount,
    currentPage,
    onPageChange,
    hrefBuilder,
    marginPageCount,
    showPages,
    surroundingPageCount,
    renderPage
  });
  return /*#__PURE__*/jsx(BoxWithFallback, {
    as: "nav",
    className: clsx(classes.PaginationContainer, className),
    "aria-label": "Pagination",
    ...rest,
    children: /*#__PURE__*/jsx(Box, {
      display: "inline-block",
      className: classes.TablePaginationSteps,
      "data-hidden-viewport-ranges": getViewportRangesToHidePages(showPages).join(' '),
      children: pageElements
    })
  });
}
Pagination.displayName = "Pagination";
function defaultHrefBuilder(pageNum) {
  return `#${pageNum}`;
}
function noop() {}

export { Pagination as default };
