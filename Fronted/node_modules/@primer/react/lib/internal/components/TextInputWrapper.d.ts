import React, { type ComponentProps } from 'react';
import { type ResponsiveValue } from 'styled-system';
import type { SxProp } from '../../sx';
import type { FormValidationStatus } from '../../utils/types/FormValidationStatus';
export type TextInputSizes = 'small' | 'medium' | 'large';
export declare const TextInputBaseWrapper: React.ForwardRefExoticComponent<{
    hasLeadingVisual?: boolean;
    hasTrailingVisual?: boolean;
} & {
    block?: boolean;
    contrast?: boolean;
    disabled?: boolean;
    hasTrailingAction?: boolean;
    isInputFocused?: boolean;
    monospace?: boolean;
    validationStatus?: FormValidationStatus;
    /** @deprecated Use `size` prop instead */
    variant?: TextInputSizes;
    size?: TextInputSizes;
    className?: string;
    style?: React.CSSProperties;
    onClick?: React.MouseEventHandler;
    children?: React.ReactNode;
    /** @deprecated Update `width` using CSS modules or style. */
    width?: string | number | ResponsiveValue<string | number>;
    /** @deprecated Update `min-width` using CSS modules or style. */
    minWidth?: string | number | ResponsiveValue<string | number>;
    /** @deprecated Update `max-width` using CSS modules or style. */
    maxWidth?: string | number | ResponsiveValue<string | number>;
} & SxProp & React.RefAttributes<HTMLElement>>;
export declare const TextInputWrapper: React.ForwardRefExoticComponent<Omit<{
    hasLeadingVisual?: boolean;
    hasTrailingVisual?: boolean;
} & {
    block?: boolean;
    contrast?: boolean;
    disabled?: boolean;
    hasTrailingAction?: boolean;
    isInputFocused?: boolean;
    monospace?: boolean;
    validationStatus?: FormValidationStatus;
    /** @deprecated Use `size` prop instead */
    variant?: TextInputSizes;
    size?: TextInputSizes;
    className?: string;
    style?: React.CSSProperties;
    onClick?: React.MouseEventHandler;
    children?: React.ReactNode;
    /** @deprecated Update `width` using CSS modules or style. */
    width?: string | number | ResponsiveValue<string | number>;
    /** @deprecated Update `min-width` using CSS modules or style. */
    minWidth?: string | number | ResponsiveValue<string | number>;
    /** @deprecated Update `max-width` using CSS modules or style. */
    maxWidth?: string | number | ResponsiveValue<string | number>;
} & SxProp & React.RefAttributes<HTMLElement>, "ref"> & React.RefAttributes<HTMLElement>>;
export type StyledBaseWrapperProps = ComponentProps<typeof TextInputBaseWrapper>;
export type StyledWrapperProps = ComponentProps<typeof TextInputWrapper>;
export default TextInputWrapper;
//# sourceMappingURL=TextInputWrapper.d.ts.map