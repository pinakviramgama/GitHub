import { forwardRef } from 'react';
import { defaultSxProp } from '../utils/defaultSxProp.js';
import TokenBase, { defaultTokenSize, isTokenInteractive } from './TokenBase.js';
import RemoveTokenButton from './_RemoveTokenButton.js';
import TokenTextContainer from './_TokenTextContainer.js';
import VisuallyHidden from '../_VisuallyHidden.js';
import classes from './Token.module.css.js';
import { clsx } from 'clsx';
import { jsxs, jsx } from 'react/jsx-runtime';

const tokenBorderWidthPx = 1;
const LeadingVisualContainer = ({
  children,
  size
}) => /*#__PURE__*/jsx("div", {
  className: clsx(classes.LeadingVisualContainer, {
    [classes.LargeLeadingVisual]: size && ['large', 'xlarge'].includes(size)
  }),
  children: children
});
LeadingVisualContainer.displayName = "LeadingVisualContainer";
const Token = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  const {
    as,
    onRemove,
    id,
    leadingVisual: LeadingVisual,
    text,
    size = defaultTokenSize,
    hideRemoveButton,
    href,
    onClick,
    sx: sxProp = defaultSxProp,
    className,
    style,
    ...rest
  } = props;
  const hasMultipleActionTargets = isTokenInteractive(props) && Boolean(onRemove) && !hideRemoveButton;
  const onRemoveClick = e => {
    e.stopPropagation();
    onRemove && onRemove();
  };
  const interactiveTokenProps = {
    as,
    href,
    onClick
  };
  return /*#__PURE__*/jsxs(TokenBase, {
    onRemove: onRemove,
    id: id === null || id === void 0 ? void 0 : id.toString(),
    className: clsx(className, classes.Token),
    text: text,
    size: size,
    sx: sxProp,
    "data-is-selected": props.isSelected,
    "data-is-remove-btn": !(hideRemoveButton || !onRemove),
    ...(!hasMultipleActionTargets ? interactiveTokenProps : {}),
    ...rest,
    ref: forwardedRef,
    style: {
      borderWidth: `${tokenBorderWidthPx}px`,
      ...style
    },
    children: [LeadingVisual ? /*#__PURE__*/jsx(LeadingVisualContainer, {
      size: size,
      children: /*#__PURE__*/jsx(LeadingVisual, {})
    }) : null, /*#__PURE__*/jsxs(TokenTextContainer, {
      ...(hasMultipleActionTargets ? interactiveTokenProps : {}),
      children: [text, onRemove && /*#__PURE__*/jsx(VisuallyHidden, {
        children: " (press backspace or delete to remove)"
      })]
    }), !hideRemoveButton && onRemove ? /*#__PURE__*/jsx(RemoveTokenButton, {
      borderOffset: tokenBorderWidthPx,
      onClick: onRemoveClick,
      size: size,
      isParentInteractive: isTokenInteractive(props),
      "aria-hidden": hasMultipleActionTargets ? 'true' : 'false'
    }) : null]
  });
});
Token.displayName = 'Token';

export { Token as default };
