import React, { forwardRef } from 'react';
import { clsx } from 'clsx';
import classes from './ProgressBar.module.css.js';
import { BoxWithFallback } from '../internal/components/BoxWithFallback.js';
import { jsx } from 'react/jsx-runtime';

const Item = /*#__PURE__*/forwardRef(({
  progress,
  'aria-label': ariaLabel,
  'aria-valuenow': ariaValueNow,
  'aria-valuetext': ariaValueText,
  className,
  style,
  ...rest
}, forwardRef) => {
  const progressAsNumber = typeof progress === 'string' ? parseInt(progress, 10) : progress;
  const ariaAttributes = {
    'aria-valuenow': ariaValueNow !== null && ariaValueNow !== void 0 ? ariaValueNow : progressAsNumber !== undefined && progressAsNumber >= 0 ? Math.round(progressAsNumber) : 0,
    'aria-valuemin': 0,
    'aria-valuemax': 100,
    'aria-valuetext': ariaValueText
  };
  const progressBarWidth = '--progress-width';
  const progressBarBg = '--progress-bg';
  const styles = {};
  const bgType = rest.bg && rest.bg.split('.');
  styles[progressBarWidth] = progress ? `${progress}%` : '0%';
  styles[progressBarBg] = bgType && `var(--bgColor-${bgType[0]}-${bgType[1]})` || 'var(--bgColor-success-emphasis)';
  return /*#__PURE__*/jsx(BoxWithFallback, {
    as: "span",
    className: clsx(className, classes.ProgressBarItem),
    ...rest,
    role: "progressbar",
    "aria-label": ariaLabel,
    ref: forwardRef,
    progress: progress,
    style: {
      ...styles,
      ...style
    },
    ...ariaAttributes
  });
});
Item.displayName = 'ProgressBar.Item';
const ProgressBar = /*#__PURE__*/forwardRef(({
  animated,
  progress,
  bg = 'success.emphasis',
  barSize = 'default',
  children,
  'aria-label': ariaLabel,
  'aria-valuenow': ariaValueNow,
  'aria-valuetext': ariaValueText,
  className,
  inline,
  ...rest
}, forwardRef) => {
  if (children && progress) {
    throw new Error('You should pass `progress` or children, not both.');
  }

  // Get the number of non-empty nodes passed as children, this will exclude
  // booleans, null, and undefined
  const validChildren = React.Children.toArray(children).length;
  return /*#__PURE__*/jsx(BoxWithFallback, {
    as: "span",
    ref: forwardRef,
    className: clsx(className, classes.ProgressBarContainer),
    "data-progress-display": inline ? 'inline' : 'block',
    "data-progress-bar-size": barSize,
    ...rest,
    children: validChildren ? children : /*#__PURE__*/jsx(Item, {
      "data-animated": animated,
      progress: progress,
      "aria-label": ariaLabel,
      "aria-valuenow": ariaValueNow,
      "aria-valuetext": ariaValueText,
      bg: bg
    })
  });
});
ProgressBar.displayName = 'ProgressBar';

export { Item, ProgressBar };
