'use strict';

var React = require('react');
var RadioGroup = require('../RadioGroup/RadioGroup.js');
var clsx = require('clsx');
var shared_module = require('../Checkbox/shared.module.css.js');
var Radio_module = require('./Radio.module.css.js');
var defaultSxProp = require('../utils/defaultSxProp.js');
var jsxRuntime = require('react/jsx-runtime');
var Box = require('../Box/Box.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

/**
 * An accessible, native radio component for selecting one option from a list.
 */
const Radio = /*#__PURE__*/React__default.default.forwardRef(({
  checked,
  disabled,
  name: nameProp,
  onChange,
  sx: sxProp = defaultSxProp.defaultSxProp,
  required,
  value,
  className,
  'aria-hidden': ariaHidden = false,
  ...rest
}, ref) => {
  const radioGroupContext = React.useContext(RadioGroup.RadioGroupContext);
  const handleOnChange = e => {
    (radioGroupContext === null || radioGroupContext === void 0 ? void 0 : radioGroupContext.onChange) && radioGroupContext.onChange(e);
    onChange && onChange(e);
  };
  const name = nameProp || (radioGroupContext === null || radioGroupContext === void 0 ? void 0 : radioGroupContext.name);
  if (!name && !ariaHidden) {
    // eslint-disable-next-line no-console
    console.warn('A radio input must have a `name` attribute. Pass `name` as a prop directly to each Radio, or nest them in a `RadioGroup` component with a `name` prop');
  }
  if (sxProp !== defaultSxProp.defaultSxProp) {
    return /*#__PURE__*/jsxRuntime.jsx(Box, {
      as: "input",
      sx: sxProp,
      type: "radio",
      value: value,
      name: name,
      ref: ref,
      disabled: disabled,
      checked: checked,
      "aria-checked": checked ? 'true' : 'false',
      required: required,
      onChange: handleOnChange,
      className: clsx.clsx(className, shared_module.Input, Radio_module.Radio),
      "aria-hidden": ariaHidden,
      ...rest
    });
  }
  return /*#__PURE__*/jsxRuntime.jsx("input", {
    type: "radio",
    value: value,
    name: name,
    ref: ref,
    disabled: disabled,
    checked: checked,
    "aria-checked": checked ? 'true' : 'false',
    required: required,
    onChange: handleOnChange,
    className: clsx.clsx(className, shared_module.Input, Radio_module.Radio),
    ...rest
  });
});
Radio.displayName = 'Radio';

module.exports = Radio;
