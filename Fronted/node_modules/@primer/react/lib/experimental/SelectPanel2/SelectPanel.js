'use strict';

var React = require('react');
var octiconsReact = require('@primer/octicons-react');
var ActionListContainerContext = require('../../ActionList/ActionListContainerContext.js');
var useSlots = require('../../hooks/useSlots.js');
var Overlay = require('../../Overlay/Overlay.js');
var InputLabel = require('../../internal/components/InputLabel.js');
var invariant = require('../../utils/invariant.js');
var useResponsiveValue = require('../../hooks/useResponsiveValue.js');
var clsx = require('clsx');
var SelectPanel_module = require('./SelectPanel.module.css.js');
var jsxRuntime = require('react/jsx-runtime');
var useProvidedRefOrCreate = require('../../hooks/useProvidedRefOrCreate.js');
var useId = require('../../hooks/useId.js');
var useAnchoredPosition = require('../../hooks/useAnchoredPosition.js');
var Octicon = require('../../Octicon/Octicon.js');
var AriaStatus = require('../../live-region/AriaStatus.js');
var Spinner = require('../../Spinner/Spinner.js');
var Button = require('../../Button/Button.js');
var TextInput = require('../../TextInput/TextInput.js');
var IconButton = require('../../Button/IconButton.js');
var Heading = require('../../Heading/Heading.js');
var _FormControlContext = require('../../FormControl/_FormControlContext.js');
var Link = require('../../Link/Link.js');
var Checkbox = require('../../Checkbox/Checkbox.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const SelectPanelContext = /*#__PURE__*/React__default.default.createContext({
  title: '',
  description: undefined,
  panelId: '',
  onCancel: () => {},
  onClearSelection: undefined,
  searchQuery: '',
  setSearchQuery: () => {},
  selectionVariant: 'multiple',
  moveFocusToList: () => {}
});
const responsiveButtonSizes = {
  narrow: 'medium',
  regular: 'small'
};
const Panel = ({
  title,
  description,
  variant: propsVariant,
  selectionVariant = 'multiple',
  id,
  defaultOpen = false,
  open: propsOpen,
  anchorRef: providedAnchorRef,
  anchoredPositionSettings,
  onCancel: propsOnCancel,
  onClearSelection: propsOnClearSelection,
  onSubmit: propsOnSubmit,
  width = 'medium',
  maxHeight = 'large',
  className,
  ...props
}) => {
  var _position$top, _position$left, _slots$header;
  const [internalOpen, setInternalOpen] = React__default.default.useState(defaultOpen);
  const responsiveVariants = Object.assign({
    regular: 'anchored',
    narrow: 'full-screen'
  },
  // defaults
  typeof propsVariant === 'string' ? {
    regular: propsVariant
  } : propsVariant);
  const currentVariant = useResponsiveValue.useResponsiveValue(responsiveVariants, 'anchored');

  // sync open state with props
  if (propsOpen !== undefined && internalOpen !== propsOpen) setInternalOpen(propsOpen);

  // TODO: replace this hack with clone element?

  // ðŸš¨ Hack for good API!
  // we strip out Anchor from children and wire it up to Dialog
  // with additional props for accessibility
  let Anchor;
  const anchorRef = useProvidedRefOrCreate.useProvidedRefOrCreate(providedAnchorRef);
  const onAnchorClick = () => {
    if (!internalOpen) setInternalOpen(true);else onInternalCancel();
  };
  const contents = React__default.default.Children.map(props.children, child => {
    if (/*#__PURE__*/React__default.default.isValidElement(child) && child.type === SelectPanelButton) {
      // eslint-disable-next-line react-compiler/react-compiler
      Anchor = /*#__PURE__*/React__default.default.cloneElement(child, {
        // @ts-ignore TODO
        ref: anchorRef,
        onClick: child.props.onClick || onAnchorClick,
        'aria-haspopup': true,
        'aria-expanded': internalOpen
      });
      return null;
    }
    return child;
  });
  const onInternalClose = React__default.default.useCallback(() => {
    if (internalOpen === false) return; // nothing to do here
    if (propsOpen === undefined) setInternalOpen(false);
  }, [internalOpen, propsOpen]);
  const onInternalCancel = React__default.default.useCallback(() => {
    onInternalClose();
    if (typeof propsOnCancel === 'function') propsOnCancel();
  }, [onInternalClose, propsOnCancel]);
  const onInternalSubmit = event => {
    event === null || event === void 0 ? void 0 : event.preventDefault(); // there is no event with selectionVariant=instant
    onInternalClose();
    if (typeof propsOnSubmit === 'function') propsOnSubmit(event);
  };
  const onInternalClearSelection = () => {
    if (typeof propsOnClearSelection === 'function') propsOnClearSelection();
  };
  const internalAfterSelect = event => {
    if (selectionVariant === 'instant') onInternalSubmit();
    if (event.type === 'keypress') {
      if (event.key === 'Enter') onInternalSubmit();
    }
  };

  /* Search/Filter */
  const [searchQuery, setSearchQuery] = React__default.default.useState('');

  /* Panel plumbing */
  const panelId = useId.useId(id);
  const [slots, childrenInBody] = useSlots.useSlots(contents, {
    header: SelectPanelHeader,
    footer: SelectPanelFooter
  });

  // used in SelectPanel.SearchInput
  const moveFocusToList = () => {
    var _dialogRef$current;
    const selector = 'ul[role=listbox] li:not([role=none])';
    // being specific about roles because there can be another ul (tabs in header) and an ActionList.Group (li[role=none])
    const firstListElement = (_dialogRef$current = dialogRef.current) === null || _dialogRef$current === void 0 ? void 0 : _dialogRef$current.querySelector(selector);
    firstListElement === null || firstListElement === void 0 ? void 0 : firstListElement.focus();
  };

  /* Dialog */
  const dialogRef = React__default.default.useRef(null);

  // sync dialog open state (imperative) with internal component state
  React__default.default.useEffect(() => {
    var _dialogRef$current2, _dialogRef$current3;
    if (internalOpen) (_dialogRef$current2 = dialogRef.current) === null || _dialogRef$current2 === void 0 ? void 0 : _dialogRef$current2.showModal();else if ((_dialogRef$current3 = dialogRef.current) !== null && _dialogRef$current3 !== void 0 && _dialogRef$current3.open) dialogRef.current.close();
  }, [internalOpen]);

  // dialog handles Esc automatically, so we have to sync internal state
  // but it doesn't call onCancel, so have another effect for that!
  React__default.default.useEffect(() => {
    const dialogEl = dialogRef.current;
    dialogEl === null || dialogEl === void 0 ? void 0 : dialogEl.addEventListener('close', onInternalClose);
    return () => dialogEl === null || dialogEl === void 0 ? void 0 : dialogEl.removeEventListener('close', onInternalClose);
  }, [onInternalClose]);

  // Esc handler
  React__default.default.useEffect(() => {
    const dialogEl = dialogRef.current;
    const handler = event => {
      if (event.key === 'Escape') onInternalCancel();
    };
    dialogEl === null || dialogEl === void 0 ? void 0 : dialogEl.addEventListener('keydown', handler);
    return () => dialogEl === null || dialogEl === void 0 ? void 0 : dialogEl.removeEventListener('keydown', handler);
  }, [onInternalCancel]);

  // Autofocus hack: React doesn't support autoFocus for dialog: https://github.com/facebook/react/issues/23301
  // tl;dr: react takes over autofocus instead of letting the browser handle it,
  // but not for dialogs, so we have to do it
  React__default.default.useEffect(function initialFocus() {
    if (internalOpen) {
      const searchInput = document.querySelector('dialog[open] input');
      if (searchInput) searchInput.focus();else moveFocusToList();
    }
  }, [internalOpen]);

  /* Anchored */
  const {
    position
  } = useAnchoredPosition.useAnchoredPosition({
    anchorElementRef: anchorRef,
    floatingElementRef: dialogRef,
    side: 'outside-bottom',
    align: 'start',
    ...anchoredPositionSettings
  }, [internalOpen, anchorRef.current, dialogRef.current]);

  /*
    We want to cancel and close the panel when user clicks outside.
    See decision log: https://github.com/github/primer/discussions/2614#discussioncomment-8544561
  */
  const onClickOutside = onInternalCancel;
  let maxHeightValue = Overlay.heightMap[maxHeight];
  if (currentVariant === 'bottom-sheet') {
    maxHeightValue = 'calc(100vh - 64px)';
  } else if (currentVariant === 'full-screen') {
    maxHeightValue = '100vh';
  }
  return /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [Anchor, /*#__PURE__*/jsxRuntime.jsx(Overlay.BaseOverlay, {
      as: "dialog",
      ref: dialogRef,
      "aria-labelledby": `${panelId}--title`,
      "aria-describedby": description ? `${panelId}--description` : undefined,
      width: width,
      height: "fit-content",
      maxHeight: maxHeight,
      "data-variant": currentVariant,
      style: {
        '--max-height': maxHeightValue,
        '--position-top': `${(_position$top = position === null || position === void 0 ? void 0 : position.top) !== null && _position$top !== void 0 ? _position$top : 0}px`,
        '--position-left': `${(_position$left = position === null || position === void 0 ? void 0 : position.left) !== null && _position$left !== void 0 ? _position$left : 0}px`,
        visibility: internalOpen ? 'visible' : 'hidden',
        display: 'flex'
      },
      className: clsx.clsx(SelectPanel_module.Overlay, className),
      ...props,
      onClick: event => {
        if (event.target === event.currentTarget) onClickOutside();
      },
      children: internalOpen && /*#__PURE__*/jsxRuntime.jsx(jsxRuntime.Fragment, {
        children: /*#__PURE__*/jsxRuntime.jsx(SelectPanelContext.Provider, {
          value: {
            panelId,
            title,
            description,
            onCancel: onInternalCancel,
            onClearSelection: propsOnClearSelection ? onInternalClearSelection : undefined,
            searchQuery,
            setSearchQuery,
            selectionVariant,
            moveFocusToList
          },
          children: /*#__PURE__*/jsxRuntime.jsxs("form", {
            method: "dialog",
            onSubmit: onInternalSubmit,
            className: SelectPanel_module.Form,
            children: [(_slots$header = slots.header) !== null && _slots$header !== void 0 ? _slots$header :
            /*#__PURE__*/
            /* render default header as fallback */
            jsxRuntime.jsx(SelectPanelHeader, {}), /*#__PURE__*/jsxRuntime.jsx("div", {
              className: SelectPanel_module.Container,
              children: /*#__PURE__*/jsxRuntime.jsx(ActionListContainerContext.ActionListContainerContext.Provider, {
                value: {
                  container: 'SelectPanel',
                  listRole: 'listbox',
                  selectionAttribute: 'aria-selected',
                  selectionVariant: selectionVariant === 'instant' ? 'single' : selectionVariant,
                  afterSelect: internalAfterSelect,
                  listLabelledBy: `${panelId}--title`,
                  enableFocusZone: true // Arrow keys navigation for list items
                },
                children: childrenInBody
              })
            }), slots.footer]
          })
        })
      })
    })]
  });
};
const SelectPanelButton = /*#__PURE__*/React__default.default.forwardRef((props, anchorRef) => {
  const inputProps = _FormControlContext.useFormControlForwardedProps(props);
  const [labelText, setLabelText] = React.useState('');
  React.useEffect(() => {
    const label = document.querySelector(`[for='${inputProps.id}']`);
    if (label !== null && label !== void 0 && label.textContent) {
      setLabelText(label.textContent);
    }
  }, [inputProps.id]);
  if (labelText) {
    return /*#__PURE__*/jsxRuntime.jsx(Button.ButtonComponent, {
      ref: anchorRef,
      "aria-label": `${anchorRef.current.textContent}, ${labelText}`,
      ...inputProps
    });
  } else {
    return /*#__PURE__*/jsxRuntime.jsx(Button.ButtonComponent, {
      ref: anchorRef,
      ...props
    });
  }
});
const SelectPanelHeader = ({
  children,
  onBack,
  className,
  ...props
}) => {
  const [slots, childrenWithoutSlots] = useSlots.useSlots(children, {
    searchInput: SelectPanelSearchInput
  });
  const {
    title,
    description,
    panelId,
    onCancel,
    onClearSelection
  } = React__default.default.useContext(SelectPanelContext);
  return /*#__PURE__*/jsxRuntime.jsxs("div", {
    className: clsx.clsx(SelectPanel_module.Header, className),
    ...props,
    children: [/*#__PURE__*/jsxRuntime.jsxs("div", {
      className: SelectPanel_module.HeaderContent,
      "data-description": description ? true : undefined,
      "data-search-input": slots.searchInput ? true : undefined,
      children: [/*#__PURE__*/jsxRuntime.jsxs("div", {
        className: SelectPanel_module.FlexBox,
        children: [onBack ? /*#__PURE__*/jsxRuntime.jsx(IconButton.IconButton, {
          type: "button",
          variant: "invisible",
          icon: octiconsReact.ArrowLeftIcon,
          "aria-label": "Back",
          onClick: () => onBack()
        }) : null, /*#__PURE__*/jsxRuntime.jsxs("div", {
          className: SelectPanel_module.TitleWrapper,
          "data-description": description ? true : undefined,
          "data-on-back": onBack ? true : undefined,
          children: [/*#__PURE__*/jsxRuntime.jsx(Heading, {
            as: "h1",
            id: `${panelId}--title`,
            className: SelectPanel_module.Title,
            children: title
          }), description ? /*#__PURE__*/jsxRuntime.jsx("span", {
            id: `${panelId}--description`,
            className: SelectPanel_module.Description,
            children: description
          }) : null]
        })]
      }), /*#__PURE__*/jsxRuntime.jsxs("div", {
        children: [onClearSelection ? /*#__PURE__*/jsxRuntime.jsx(IconButton.IconButton, {
          type: "button",
          variant: "invisible",
          icon: octiconsReact.FilterRemoveIcon,
          "aria-label": "Clear selection",
          onClick: onClearSelection
        }) : null, /*#__PURE__*/jsxRuntime.jsx(IconButton.IconButton, {
          type: "button",
          variant: "invisible",
          icon: octiconsReact.XIcon,
          "aria-label": "Close",
          onClick: () => onCancel()
        })]
      })]
    }), slots.searchInput, childrenWithoutSlots]
  });
};
SelectPanelHeader.displayName = "SelectPanelHeader";
const SelectPanelSearchInput = ({
  onChange: propsOnChange,
  onKeyDown: propsOnKeyDown,
  className,
  ...props
}) => {
  // TODO: use forwardedRef
  const inputRef = /*#__PURE__*/React__default.default.createRef();
  const {
    setSearchQuery,
    moveFocusToList
  } = React__default.default.useContext(SelectPanelContext);
  const internalOnChange = event => {
    // If props.onChange is given, the application controls search,
    // otherwise the component does
    if (typeof propsOnChange === 'function') propsOnChange(event);else setSearchQuery(event.target.value);
  };
  const internalKeyDown = event => {
    if (event.key === 'ArrowDown') {
      event.preventDefault(); // prevent scroll
      moveFocusToList();
    }
    if (typeof propsOnKeyDown === 'function') propsOnKeyDown(event);
  };
  return /*#__PURE__*/jsxRuntime.jsx(TextInput, {
    ref: inputRef,
    block: true,
    leadingVisual: octiconsReact.SearchIcon,
    placeholder: "Search",
    trailingAction: /*#__PURE__*/jsxRuntime.jsx(TextInput.Action, {
      icon: octiconsReact.XCircleFillIcon,
      "aria-label": "Clear",
      tooltipDirection: "w",
      className: SelectPanel_module.ClearAction,
      onClick: () => {
        if (inputRef.current) inputRef.current.value = '';
        if (typeof propsOnChange === 'function') {
          // @ts-ignore TODO this is a hacky solution to clear
          propsOnChange({
            target: inputRef.current,
            currentTarget: inputRef.current
          });
        }
      }
    }),
    className: clsx.clsx(SelectPanel_module.TextInput, className),
    onChange: internalOnChange,
    onKeyDown: internalKeyDown,
    ...props
  });
};
SelectPanelSearchInput.displayName = "SelectPanelSearchInput";
const FooterContext = /*#__PURE__*/React__default.default.createContext(false);
const SelectPanelFooter = ({
  ...props
}) => {
  const {
    onCancel,
    selectionVariant
  } = React__default.default.useContext(SelectPanelContext);
  const hidePrimaryActions = selectionVariant === 'instant';
  const buttonSize = useResponsiveValue.useResponsiveValue(responsiveButtonSizes, 'small');
  if (hidePrimaryActions && !props.children) {
    // nothing to render
    // todo: we can inform them the developer footer will render nothing
    return null;
  }
  return /*#__PURE__*/jsxRuntime.jsx(FooterContext.Provider, {
    value: true,
    children: /*#__PURE__*/jsxRuntime.jsxs("div", {
      className: SelectPanel_module.Footer,
      "data-hide-primary-actions": hidePrimaryActions || undefined,
      children: [/*#__PURE__*/jsxRuntime.jsx("div", {
        className: SelectPanel_module.FooterContent,
        "data-hide-primary-actions": hidePrimaryActions || undefined,
        children: props.children
      }), hidePrimaryActions ? null : /*#__PURE__*/jsxRuntime.jsxs("div", {
        className: SelectPanel_module.FooterActions,
        children: [/*#__PURE__*/jsxRuntime.jsx(Button.ButtonComponent, {
          type: "button",
          size: buttonSize,
          onClick: () => onCancel(),
          children: "Cancel"
        }), /*#__PURE__*/jsxRuntime.jsx(Button.ButtonComponent, {
          type: "submit",
          size: buttonSize,
          variant: "primary",
          children: "Save"
        })]
      })]
    })
  });
};
SelectPanelFooter.displayName = "SelectPanelFooter";
const SecondaryButton = props => {
  const size = useResponsiveValue.useResponsiveValue(responsiveButtonSizes, 'small');
  return /*#__PURE__*/jsxRuntime.jsx(Button.ButtonComponent, {
    type: "button",
    size: size,
    block: true,
    ...props
  });
};
SecondaryButton.displayName = "SecondaryButton";
const SecondaryLink = ({
  className,
  ...props
}) => {
  const size = useResponsiveValue.useResponsiveValue(responsiveButtonSizes, 'small');
  return (
    /*#__PURE__*/
    // @ts-ignore TODO: is as prop is not recognised by button?
    jsxRuntime.jsx(Button.ButtonComponent, {
      as: Link,
      size: size,
      variant: "invisible",
      block: true,
      ...props,
      className: clsx.clsx(SelectPanel_module.SmallText, className),
      children: props.children
    })
  );
};
SecondaryLink.displayName = "SecondaryLink";
const SecondaryCheckbox = ({
  id,
  children,
  className,
  ...props
}) => {
  const checkboxId = useId.useId(id);
  const {
    selectionVariant
  } = React__default.default.useContext(SelectPanelContext);

  // Checkbox should not be used with instant selection
  !(selectionVariant !== 'instant') ? process.env.NODE_ENV !== "production" ? invariant.invariant(false, 'Sorry! SelectPanel.SecondaryAction with variant="checkbox" is not allowed inside selectionVariant="instant"') : invariant.invariant(false) : void 0;
  return /*#__PURE__*/jsxRuntime.jsxs("div", {
    className: SelectPanel_module.SecondaryCheckbox,
    children: [/*#__PURE__*/jsxRuntime.jsx(Checkbox, {
      id: checkboxId,
      className: clsx.clsx(SelectPanel_module.Checkbox, className),
      ...props
    }), /*#__PURE__*/jsxRuntime.jsx(InputLabel.InputLabel, {
      htmlFor: checkboxId,
      className: SelectPanel_module.SmallText,
      children: children
    })]
  });
};
SecondaryCheckbox.displayName = "SecondaryCheckbox";
const SelectPanelSecondaryAction = ({
  variant,
  ...props
}) => {
  const insideFooter = React__default.default.useContext(FooterContext);
  !insideFooter ? process.env.NODE_ENV !== "production" ? invariant.invariant(false, 'SelectPanel.SecondaryAction is only allowed inside SelectPanel.Footer') : invariant.invariant(false) : void 0;

  // @ts-ignore TODO
  if (variant === 'button') return /*#__PURE__*/jsxRuntime.jsx(SecondaryButton, {
    ...props
  });
  // @ts-ignore TODO
  else if (variant === 'link') return /*#__PURE__*/jsxRuntime.jsx(SecondaryLink, {
    ...props
  });
  // @ts-ignore TODO
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
  else if (variant === 'checkbox') return /*#__PURE__*/jsxRuntime.jsx(SecondaryCheckbox, {
    ...props
  });
};
const SelectPanelLoading = ({
  children = 'Fetching items...'
}) => {
  return /*#__PURE__*/jsxRuntime.jsxs(AriaStatus.AriaStatus, {
    announceOnShow: true,
    className: SelectPanel_module.SelectPanelLoading,
    children: [/*#__PURE__*/jsxRuntime.jsx(Spinner, {
      size: "medium",
      srText: null
    }), /*#__PURE__*/jsxRuntime.jsx("span", {
      className: SelectPanel_module.LoadingText,
      children: children
    })]
  });
};
SelectPanelLoading.displayName = "SelectPanelLoading";
const SelectPanelMessage = ({
  variant = 'warning',
  size = variant === 'empty' ? 'full' : 'inline',
  title,
  children
}) => {
  if (size === 'full') {
    return /*#__PURE__*/jsxRuntime.jsxs("div", {
      "aria-live": variant === 'empty' ? undefined : 'polite',
      className: SelectPanel_module.MessageFull,
      children: [variant !== 'empty' ? /*#__PURE__*/jsxRuntime.jsx(Octicon, {
        icon: octiconsReact.AlertIcon,
        className: clsx.clsx(SelectPanel_module.Octicon, variant === 'error' ? SelectPanel_module.Error : undefined, variant === 'warning' ? SelectPanel_module.Warning : undefined)
      }) : null, /*#__PURE__*/jsxRuntime.jsx("span", {
        className: SelectPanel_module.MessageTitle,
        children: title
      }), /*#__PURE__*/jsxRuntime.jsx("span", {
        className: SelectPanel_module.MessageContent,
        children: children
      })]
    });
  } else {
    return /*#__PURE__*/jsxRuntime.jsxs("div", {
      "aria-live": variant === 'empty' ? undefined : 'polite',
      className: SelectPanel_module.MessageInline,
      "data-variant": variant,
      children: [/*#__PURE__*/jsxRuntime.jsx(octiconsReact.AlertIcon, {
        size: 16
      }), /*#__PURE__*/jsxRuntime.jsx("div", {
        children: children
      })]
    });
  }
};
const SelectPanel = Object.assign(Panel, {
  Button: SelectPanelButton,
  Header: SelectPanelHeader,
  SearchInput: SelectPanelSearchInput,
  Footer: SelectPanelFooter,
  Loading: SelectPanelLoading,
  Message: SelectPanelMessage,
  SecondaryAction: SelectPanelSecondaryAction
});

exports.SelectPanel = SelectPanel;
