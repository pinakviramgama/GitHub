'use strict';

var clsx = require('clsx');
var TextInputInnerVisualSlot_module = require('./TextInputInnerVisualSlot.module.css.js');
var jsxRuntime = require('react/jsx-runtime');
var Spinner = require('../../Spinner/Spinner.js');

const TextInputInnerVisualSlot = ({
  children,
  hasLoadingIndicator,
  showLoadingIndicator,
  visualPosition,
  id
}) => {
  const isLeading = visualPosition === 'leading';
  if (!children && !hasLoadingIndicator || isLeading && !children && !showLoadingIndicator) {
    return null;
  }
  if (!hasLoadingIndicator) {
    return /*#__PURE__*/jsxRuntime.jsx("span", {
      className: "TextInput-icon",
      id: id,
      "aria-hidden": "true",
      children: children
    });
  }
  return /*#__PURE__*/jsxRuntime.jsx("span", {
    className: "TextInput-icon",
    children: /*#__PURE__*/jsxRuntime.jsxs("div", {
      className: TextInputInnerVisualSlot_module.Box,
      id: id,
      children: [children && /*#__PURE__*/jsxRuntime.jsx("div", {
        className: clsx.clsx(showLoadingIndicator ? TextInputInnerVisualSlot_module.SpinnerHidden : TextInputInnerVisualSlot_module.SpinnerVisible),
        children: children
      }), /*#__PURE__*/jsxRuntime.jsx(Spinner, {
        srText: null,
        className: clsx.clsx(showLoadingIndicator ? TextInputInnerVisualSlot_module.SpinnerVisible : TextInputInnerVisualSlot_module.SpinnerHidden, children && TextInputInnerVisualSlot_module.Spinner, children && isLeading && TextInputInnerVisualSlot_module.SpinnerLeading),
        size: children ? undefined : 'small'
      })]
    })
  });
};
TextInputInnerVisualSlot.displayName = "TextInputInnerVisualSlot";

module.exports = TextInputInnerVisualSlot;
