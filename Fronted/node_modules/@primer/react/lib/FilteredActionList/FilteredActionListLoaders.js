'use strict';

var Stack = require('../Stack/Stack.js');
var FilteredActionListLoaders_module = require('./FilteredActionListLoaders.module.css.js');
var jsxRuntime = require('react/jsx-runtime');
var Box = require('../Box/Box.js');
var SkeletonBox = require('../Skeleton/SkeletonBox.js');
var Spinner = require('../Spinner/Spinner.js');

class FilteredActionListLoadingType {
  constructor(name, appearsInBody) {
    this.name = name;
    this.appearsInBody = appearsInBody;
  }
}
const FilteredActionListLoadingTypes = {
  bodySpinner: new FilteredActionListLoadingType('body-spinner', true),
  bodySkeleton: new FilteredActionListLoadingType('body-skeleton', true),
  input: new FilteredActionListLoadingType('input', false)
};
const SKELETON_ROW_HEIGHT = 24;
const SKELETON_MIN_ROWS = 3;
function FilteredActionListBodyLoader({
  loadingType,
  height
}) {
  switch (loadingType) {
    case FilteredActionListLoadingTypes.bodySpinner:
      return /*#__PURE__*/jsxRuntime.jsx(LoadingSpinner, {
        "data-testid": "filtered-action-list-spinner"
      });
    case FilteredActionListLoadingTypes.bodySkeleton:
      {
        const rows = height < SKELETON_ROW_HEIGHT ? SKELETON_MIN_ROWS : height / SKELETON_ROW_HEIGHT;
        return /*#__PURE__*/jsxRuntime.jsx(LoadingSkeleton, {
          "data-testid": "filtered-action-list-skeleton",
          rows: rows
        });
      }
    default:
      return /*#__PURE__*/jsxRuntime.jsx(jsxRuntime.Fragment, {});
  }
}
function LoadingSpinner({
  ...props
}) {
  return /*#__PURE__*/jsxRuntime.jsx(Box, {
    p: 3,
    flexGrow: 1,
    sx: {
      alignContent: 'center',
      textAlign: 'center',
      height: '100%'
    },
    children: /*#__PURE__*/jsxRuntime.jsx(Spinner, {
      ...props
    })
  });
}
LoadingSpinner.displayName = "LoadingSpinner";
function LoadingSkeleton({
  rows = 10,
  ...props
}) {
  return /*#__PURE__*/jsxRuntime.jsx(Box, {
    p: 2,
    display: "flex",
    flexGrow: 1,
    flexDirection: "column",
    children: /*#__PURE__*/jsxRuntime.jsx(Stack.Stack, {
      direction: "vertical",
      justify: "center",
      gap: "condensed",
      ...props,
      children: Array.from({
        length: rows
      }, (_, i) => /*#__PURE__*/jsxRuntime.jsxs(Stack.Stack, {
        direction: "horizontal",
        gap: "condensed",
        align: "center",
        children: [/*#__PURE__*/jsxRuntime.jsx(SkeletonBox.SkeletonBox, {
          width: "16px",
          height: "16px"
        }), /*#__PURE__*/jsxRuntime.jsx(SkeletonBox.SkeletonBox, {
          height: "10px",
          width: `${Math.random() * 60 + 20}%`,
          className: FilteredActionListLoaders_module.LoadingSkeleton
        })]
      }, i))
    })
  });
}
LoadingSkeleton.displayName = "LoadingSkeleton";

exports.FilteredActionListBodyLoader = FilteredActionListBodyLoader;
exports.FilteredActionListLoadingType = FilteredActionListLoadingType;
exports.FilteredActionListLoadingTypes = FilteredActionListLoadingTypes;
