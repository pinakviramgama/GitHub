'use strict';

var React = require('react');
var ActionListContainerContext = require('./ActionListContainerContext.js');
var defaultSxProp = require('../utils/defaultSxProp.js');
var useSlots = require('../hooks/useSlots.js');
var Heading = require('./Heading.js');
var useId = require('../hooks/useId.js');
var shared = require('./shared.js');
var useFocusZone = require('../hooks/useFocusZone.js');
var clsx = require('clsx');
var ActionList_module = require('./ActionList.module.css.js');
var BoxWithFallback = require('../internal/components/BoxWithFallback.js');
var jsxRuntime = require('react/jsx-runtime');
var useProvidedRefOrCreate = require('../hooks/useProvidedRefOrCreate.js');
var behaviors = require('@primer/behaviors');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const List = /*#__PURE__*/React__default.default.forwardRef(({
  variant = 'inset',
  selectionVariant,
  showDividers = false,
  role,
  sx: sxProp = defaultSxProp.defaultSxProp,
  disableFocusZone = false,
  className,
  ...props
}, forwardedRef) => {
  var _slots$heading$props$;
  const [slots, childrenWithoutSlots] = useSlots.useSlots(props.children, {
    heading: Heading.Heading
  });
  const headingId = useId.useId();

  /** if list is inside a Menu, it will get a role from the Menu */
  const {
    listRole: listRoleFromContainer,
    listLabelledBy,
    selectionVariant: containerSelectionVariant,
    // TODO: Remove after DropdownMenu2 deprecation
    enableFocusZone: enableFocusZoneFromContainer
  } = React__default.default.useContext(ActionListContainerContext.ActionListContainerContext);
  const ariaLabelledBy = slots.heading ? (_slots$heading$props$ = slots.heading.props.id) !== null && _slots$heading$props$ !== void 0 ? _slots$heading$props$ : headingId : listLabelledBy;
  const listRole = role || listRoleFromContainer;
  const listRef = useProvidedRefOrCreate.useProvidedRefOrCreate(forwardedRef);
  let enableFocusZone = false;
  if (enableFocusZoneFromContainer !== undefined) enableFocusZone = enableFocusZoneFromContainer;else if (listRole && !disableFocusZone) enableFocusZone = ['menu', 'menubar', 'listbox'].includes(listRole);
  useFocusZone.useFocusZone({
    disabled: !enableFocusZone,
    containerRef: listRef,
    bindKeys: behaviors.FocusKeys.ArrowVertical | behaviors.FocusKeys.HomeAndEnd | behaviors.FocusKeys.PageUpDown,
    focusOutBehavior: listRole === 'menu' ? 'wrap' : undefined
  });
  return /*#__PURE__*/jsxRuntime.jsxs(shared.ListContext.Provider, {
    value: {
      variant,
      selectionVariant: selectionVariant || containerSelectionVariant,
      showDividers,
      role: listRole,
      headingId
    },
    children: [slots.heading, /*#__PURE__*/jsxRuntime.jsx(BoxWithFallback.BoxWithFallback, {
      as: "ul",
      sx: sxProp,
      className: clsx.clsx(ActionList_module.ActionList, className),
      role: listRole,
      "aria-labelledby": ariaLabelledBy,
      ref: listRef,
      "data-dividers": showDividers,
      "data-variant": variant,
      ...props,
      children: childrenWithoutSlots
    })]
  });
});
List.displayName = 'ActionList';

exports.List = List;
