import { clsx } from 'clsx';
import React, { useContext } from 'react';
import Select from '../Select/Select.js';
import ValidationAnimationContainer from '../internal/components/ValidationAnimationContainer.js';
import { useSlots } from '../hooks/useSlots.js';
import { useId } from '../hooks/useId.js';
import { FormControlCaption } from './FormControlCaption.js';
import FormControlLabel from './FormControlLabel.js';
import FormControlLeadingVisual from './FormControlLeadingVisual.js';
import FormControlValidation from './_FormControlValidation.js';
import { FormControlContextProvider } from './_FormControlContext.js';
import { warning } from '../utils/warning.js';
import classes from './FormControl.module.css.js';
import { defaultSxProp } from '../utils/defaultSxProp.js';
import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import CheckboxOrRadioGroupContext from '../internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroupContext.js';
import Autocomplete from '../Autocomplete/Autocomplete.js';
import Checkbox from '../Checkbox/Checkbox.js';
import Radio from '../Radio/Radio.js';
import TextInput from '../TextInput/TextInput.js';
import TextInputWithTokens from '../TextInputWithTokens/TextInputWithTokens.js';
import Textarea from '../Textarea/Textarea.js';
import { SelectPanel } from '../SelectPanel/SelectPanel.js';
import Box from '../Box/Box.js';

const FormControl = /*#__PURE__*/React.forwardRef(({
  children,
  disabled: disabledProp,
  layout = 'vertical',
  id: idProp,
  required,
  sx,
  className
}, ref) => {
  var _slots$validation, _slots$label;
  const [slots, childrenWithoutSlots] = useSlots(children, {
    caption: FormControlCaption,
    label: FormControlLabel,
    leadingVisual: FormControlLeadingVisual,
    validation: FormControlValidation
  });
  const expectedInputComponents = [Autocomplete, Checkbox, Radio, Select, TextInput, TextInputWithTokens, Textarea, SelectPanel];
  const choiceGroupContext = useContext(CheckboxOrRadioGroupContext);
  const disabled = choiceGroupContext.disabled || disabledProp;
  const id = useId(idProp);
  const validationMessageId = slots.validation ? `${id}-validationMessage` : undefined;
  const captionId = slots.caption ? `${id}-caption` : undefined;
  const validationStatus = (_slots$validation = slots.validation) === null || _slots$validation === void 0 ? void 0 : _slots$validation.props.variant;
  const InputComponent = childrenWithoutSlots.find(child => expectedInputComponents.some(inputComponent => /*#__PURE__*/React.isValidElement(child) && child.type === inputComponent));
  const inputProps = /*#__PURE__*/React.isValidElement(InputComponent) && InputComponent.props;
  const isChoiceInput = /*#__PURE__*/React.isValidElement(InputComponent) && (InputComponent.type === Checkbox || InputComponent.type === Radio);
  const isRadioInput = /*#__PURE__*/React.isValidElement(InputComponent) && InputComponent.type === Radio;
  if (InputComponent) {
    process.env.NODE_ENV !== "production" ? warning(inputProps === null || inputProps === void 0 ? void 0 : inputProps.id, `instead of passing the 'id' prop directly to the input component, it should be passed to the parent component, <FormControl>`) : void 0;
    process.env.NODE_ENV !== "production" ? warning(inputProps === null || inputProps === void 0 ? void 0 : inputProps.disabled, `instead of passing the 'disabled' prop directly to the input component, it should be passed to the parent component, <FormControl>`) : void 0;
    process.env.NODE_ENV !== "production" ? warning(inputProps === null || inputProps === void 0 ? void 0 : inputProps.required, `instead of passing the 'required' prop directly to the input component, it should be passed to the parent component, <FormControl>`) : void 0;
  }
  if (!slots.label) {
    // eslint-disable-next-line no-console
    console.error(`The input field with the id ${id} MUST have a FormControl.Label child.\n\nIf you want to hide the label, pass the 'visuallyHidden' prop to the FormControl.Label component.`);
  }
  if (isChoiceInput) {
    process.env.NODE_ENV !== "production" ? warning(!!slots.validation, 'Validation messages are not rendered for an individual checkbox or radio. The validation message should be shown for all options.') : void 0;
    process.env.NODE_ENV !== "production" ? warning(isRadioInput && childrenWithoutSlots.find(child => {
      var _child$props;
      return /*#__PURE__*/React.isValidElement(child) && ((_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.required);
    }), 'An individual radio cannot be a required field.') : void 0;
  } else {
    process.env.NODE_ENV !== "production" ? warning(!!slots.leadingVisual, 'A leading visual is only rendered for a checkbox or radio form control. If you want to render a leading visual inside of your input, check if your input supports a leading visual.') : void 0;
  }
  const isLabelHidden = (_slots$label = slots.label) === null || _slots$label === void 0 ? void 0 : _slots$label.props.visuallyHidden;
  const InputChildren = /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsxs("div", {
      className: classes.ControlChoiceInputs,
      children: [/*#__PURE__*/React.isValidElement(InputComponent) ? /*#__PURE__*/React.cloneElement(InputComponent, {
        id,
        disabled,
        // allow checkboxes to be required
        required: required && !isRadioInput,
        ['aria-describedby']: captionId
      }) : null, childrenWithoutSlots.filter(child => /*#__PURE__*/React.isValidElement(child) && ![Checkbox, Radio].some(inputComponent => child.type === inputComponent))]
    }), slots.leadingVisual ? /*#__PURE__*/jsx("div", {
      className: classes.LeadingVisual,
      "data-disabled": disabled ? '' : undefined,
      "data-has-caption": slots.caption ? '' : undefined,
      children: slots.leadingVisual
    }) : null, /*#__PURE__*/jsxs("div", {
      className: classes.LabelContainer,
      children: [slots.label, slots.caption]
    })]
  });
  return /*#__PURE__*/jsx(FormControlContextProvider, {
    value: {
      captionId,
      disabled,
      id,
      required,
      validationMessageId
    },
    children: isChoiceInput || layout === 'horizontal' ? sx !== defaultSxProp ? /*#__PURE__*/jsx(Box, {
      ref: ref,
      "data-has-leading-visual": slots.leadingVisual ? '' : undefined,
      sx: sx,
      className: clsx(className, classes.ControlHorizontalLayout),
      children: InputChildren
    }) : /*#__PURE__*/jsx("div", {
      ref: ref,
      "data-has-leading-visual": slots.leadingVisual ? '' : undefined,
      className: clsx(className, classes.ControlHorizontalLayout),
      children: InputChildren
    }) : /*#__PURE__*/jsxs(Box, {
      ref: ref,
      "data-has-label": !isLabelHidden ? '' : undefined,
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-start",
      sx: sx,
      className: clsx(className, classes.ControlVerticalLayout),
      children: [slots.label, /*#__PURE__*/React.isValidElement(InputComponent) && /*#__PURE__*/React.cloneElement(InputComponent, Object.assign({
        id,
        required,
        disabled,
        validationStatus,
        ['aria-describedby']: [validationMessageId, captionId].filter(Boolean).join(' ')
      }, InputComponent.props)), childrenWithoutSlots.filter(child => /*#__PURE__*/React.isValidElement(child) && !expectedInputComponents.some(inputComponent => child.type === inputComponent)), slots.validation ? /*#__PURE__*/jsx(ValidationAnimationContainer, {
        show: true,
        children: slots.validation
      }) : null, slots.caption]
    })
  });
});
var FormControl$1 = Object.assign(FormControl, {
  Caption: FormControlCaption,
  Label: FormControlLabel,
  LeadingVisual: FormControlLeadingVisual,
  Validation: FormControlValidation
});

export { FormControl$1 as default };
