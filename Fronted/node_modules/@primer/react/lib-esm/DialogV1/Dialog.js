import React, { forwardRef, useRef } from 'react';
import { IconButton } from '../Button/IconButton.js';
import useDialog from '../hooks/useDialog.js';
import { useRefObjectAsForwardedRef } from '../hooks/useRefObjectAsForwardedRef.js';
import { XIcon } from '@primer/octicons-react';
import { clsx } from 'clsx';
import classes from './Dialog.module.css.js';
import { BoxWithFallback } from '../internal/components/BoxWithFallback.js';
import { jsxs, Fragment, jsx } from 'react/jsx-runtime';

const noop = () => null;
function DialogHeader({
  children,
  className,
  ...rest
}) {
  if (React.Children.toArray(children).every(ch => typeof ch === 'string')) {
    children = /*#__PURE__*/jsx("span", {
      className: classes.HeaderChild,
      children: children
    });
  }
  return /*#__PURE__*/jsx(BoxWithFallback, {
    as: "div",
    ...rest,
    className: clsx(classes.Header, className),
    children: children
  });
}
DialogHeader.displayName = "DialogHeader";
const Dialog = /*#__PURE__*/forwardRef(({
  children,
  onDismiss = noop,
  isOpen,
  initialFocusRef,
  returnFocusRef,
  className,
  ...props
}, forwardedRef) => {
  const overlayRef = useRef(null);
  const modalRef = useRef(null);
  useRefObjectAsForwardedRef(forwardedRef, modalRef);
  const closeButtonRef = useRef(null);
  const onCloseClick = () => {
    onDismiss();
    if (returnFocusRef && returnFocusRef.current) {
      returnFocusRef.current.focus();
    }
  };
  const {
    getDialogProps
  } = useDialog({
    modalRef,
    onDismiss: onCloseClick,
    isOpen,
    initialFocusRef,
    closeButtonRef,
    overlayRef
  });
  return isOpen ? /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(BoxWithFallback, {
      as: "span",
      className: classes.Overlay,
      ref: overlayRef
    }), /*#__PURE__*/jsxs(BoxWithFallback, {
      as: "div",
      tabIndex: -1,
      ref: modalRef,
      role: "dialog",
      "aria-modal": "true",
      ...props,
      ...getDialogProps(),
      className: clsx(classes.Dialog, className),
      "data-width": props.wide ? 'wide' : props.narrow ? 'narrow' : 'default',
      children: [/*#__PURE__*/jsx(IconButton, {
        icon: XIcon,
        ref: closeButtonRef,
        onClick: onCloseClick,
        "aria-label": "Close",
        variant: "invisible",
        className: classes.CloseIcon
      }), children]
    })]
  }) : null;
});
DialogHeader.displayName = 'Dialog.Header';
Dialog.displayName = 'Dialog';
var Dialog$1 = Object.assign(Dialog, {
  Header: DialogHeader
});

export { Dialog$1 as default };
