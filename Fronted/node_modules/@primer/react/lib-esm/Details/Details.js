import React, { useState, useEffect } from 'react';
import { clsx } from 'clsx';
import classes from './Details.module.css.js';
import { useMergedRefs } from '../internal/hooks/useMergedRefs.js';
import { defaultSxProp } from '../utils/defaultSxProp.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import Box from '../Box/Box.js';

const Root = /*#__PURE__*/React.forwardRef(({
  className,
  children,
  sx: sxProp = defaultSxProp,
  ...rest
}, forwardRef) => {
  const detailsRef = React.useRef(null);
  const ref = useMergedRefs(forwardRef, detailsRef);
  const [hasSummary, setHasSummary] = useState(false);
  useEffect(() => {
    const {
      current: details
    } = detailsRef;
    if (!details) {
      return;
    }
    const updateSummary = () => {
      const summary = details.querySelector('summary:not([data-default-summary])');
      setHasSummary(!!summary);
    };

    // Update summary on mount
    updateSummary();
    const observer = new MutationObserver(() => {
      updateSummary();
    });
    observer.observe(details, {
      childList: true,
      subtree: true
    });
    return () => {
      observer.disconnect();
    };
  }, []);
  if (sxProp !== defaultSxProp) {
    return /*#__PURE__*/jsxs(Box, {
      as: 'details',
      className: clsx(className, classes.Details),
      ...rest,
      sx: sxProp,
      ref: ref,
      children: [!hasSummary && /*#__PURE__*/jsx(Details.Summary, {
        "data-default-summary": true,
        children: 'See Details'
      }), children]
    });
  }
  return /*#__PURE__*/jsxs("details", {
    className: clsx(className, classes.Details),
    ...rest,
    ref: ref,
    children: [!hasSummary && /*#__PURE__*/jsx(Details.Summary, {
      "data-default-summary": true,
      children: 'See Details'
    }), children]
  });
});
Root.displayName = 'Details';
function Summary({
  as,
  children,
  ...props
}) {
  const Component = as !== null && as !== void 0 ? as : 'summary';
  return /*#__PURE__*/jsx(Component, {
    as: Component === 'summary' ? null : 'summary',
    ...props,
    children: children
  });
}
Summary.displayName = "Summary";
Summary.displayName = 'Summary';
const Details = Object.assign(Root, {
  Summary
});

export { Summary, Details as default };
