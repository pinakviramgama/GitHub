'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var clsx = require('clsx');
var React = require('react');
var Breadcrumbs_module = require('./Breadcrumbs.module.css.js');
var toggleSxComponent = require('../internal/utils/toggleSxComponent.js');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const SELECTED_CLASS = 'selected';
const BreadcrumbsList = ({
  children
}) => {
  return /*#__PURE__*/jsxRuntime.jsx("ol", {
    className: Breadcrumbs_module.BreadcrumbsList,
    children: children
  });
};
BreadcrumbsList.displayName = "BreadcrumbsList";
const BreadcrumbsBaseComponent = toggleSxComponent.toggleSxComponent('nav');
function Breadcrumbs({
  className,
  children,
  sx: sxProp
}) {
  const wrappedChildren = React__default.default.Children.map(children, child => /*#__PURE__*/jsxRuntime.jsx("li", {
    className: Breadcrumbs_module.ItemWrapper,
    children: child
  }));
  return /*#__PURE__*/jsxRuntime.jsx(BreadcrumbsBaseComponent, {
    className: clsx.clsx(className, Breadcrumbs_module.BreadcrumbsBase),
    "aria-label": "Breadcrumbs",
    sx: sxProp,
    children: /*#__PURE__*/jsxRuntime.jsx(BreadcrumbsList, {
      children: wrappedChildren
    })
  });
}
Breadcrumbs.displayName = "Breadcrumbs";
const BreadcrumbsItemBaseComponent = toggleSxComponent.toggleSxComponent('a');
const BreadcrumbsItem = /*#__PURE__*/React__default.default.forwardRef(({
  selected,
  className,
  ...rest
}, ref) => {
  return /*#__PURE__*/jsxRuntime.jsx(BreadcrumbsItemBaseComponent, {
    className: clsx.clsx(className, Breadcrumbs_module.Item, {
      [SELECTED_CLASS]: selected,
      [Breadcrumbs_module.ItemSelected]: selected
    }),
    "aria-current": selected ? 'page' : undefined,
    ref: ref,
    ...rest
  });
});
Breadcrumbs.displayName = 'Breadcrumbs';
BreadcrumbsItem.displayName = 'Breadcrumbs.Item';
var Breadcrumbs$1 = Object.assign(Breadcrumbs, {
  Item: BreadcrumbsItem
});

/**
 * @deprecated Use the `Breadcrumbs` component instead (i.e. `<Breadcrumb>` â†’ `<Breadcrumbs>`)
 */
const Breadcrumb = Object.assign(Breadcrumbs, {
  Item: BreadcrumbsItem
});

/**
 * @deprecated Use the `BreadcrumbsProps` type instead
 */

/**
 * @deprecated Use the `BreadcrumbsItemProps` type instead
 */

exports.Breadcrumb = Breadcrumb;
exports.default = Breadcrumbs$1;
