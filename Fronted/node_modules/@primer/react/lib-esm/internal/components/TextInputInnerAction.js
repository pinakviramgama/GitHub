import { forwardRef } from 'react';
import { IconButton } from '../../Button/IconButton.js';
import { ButtonComponent } from '../../Button/Button.js';
import { clsx } from 'clsx';
import styles from './TextInputInnerAction.module.css.js';
import { jsx, Fragment } from 'react/jsx-runtime';
import { Tooltip } from '../../TooltipV2/Tooltip.js';

const ConditionalTooltip = ({
  'aria-label': ariaLabel,
  children,
  tooltipDirection
}) => /*#__PURE__*/jsx(Fragment, {
  children: ariaLabel ? /*#__PURE__*/jsx(Tooltip, {
    text: ariaLabel,
    direction: tooltipDirection,
    className: styles.ConditionalTooltip,
    children: children
  }) : children
});
const TextInputAction = /*#__PURE__*/forwardRef(({
  'aria-label': ariaLabel,
  'aria-labelledby': ariaLabelledBy,
  tooltipDirection,
  children,
  icon,
  sx: sxProp,
  className,
  variant = 'invisible',
  ...rest
}, forwardedRef) => {
  const styleProps = {
    className: clsx(variant === 'invisible' && styles.Invisible, className),
    sx: sxProp || {}
  };
  if (icon && !ariaLabel || !children && !ariaLabel) {
    // eslint-disable-next-line no-console
    console.warn('Use the `aria-label` prop to provide an accessible label for assistive technology');
  }
  const accessibleLabel = ariaLabel ? {
    'aria-label': ariaLabel
  } : ariaLabelledBy ? {
    'aria-labelledby': ariaLabelledBy
  } : {
    'aria-label': ''
  };
  return /*#__PURE__*/jsx("span", {
    className: clsx('TextInput-action', styles.TextInputAction),
    children: icon && !children && ariaLabel ? /*#__PURE__*/jsx(IconButton, {
      ...accessibleLabel,
      tooltipDirection: tooltipDirection !== null && tooltipDirection !== void 0 ? tooltipDirection : 's',
      variant: variant,
      type: "button",
      icon: icon,
      size: "small",
      ...styleProps,
      ...rest,
      ref: forwardedRef
    }) : /*#__PURE__*/jsx(ConditionalTooltip, {
      "aria-label": ariaLabel,
      children: /*#__PURE__*/jsx(ButtonComponent, {
        variant: variant,
        type: "button",
        ...styleProps,
        ...rest,
        ref: forwardedRef,
        children: children
      })
    })
  });
});

export { TextInputAction as default };
