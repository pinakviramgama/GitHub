'use strict';

var React = require('react');
var ButtonGroup_module = require('./ButtonGroup.module.css.js');
var clsx = require('clsx');
var useFocusZone = require('../hooks/useFocusZone.js');
var defaultSxProp = require('../utils/defaultSxProp.js');
var jsxRuntime = require('react/jsx-runtime');
var useProvidedRefOrCreate = require('../hooks/useProvidedRefOrCreate.js');
var Box = require('../Box/Box.js');
var behaviors = require('@primer/behaviors');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const ButtonGroup = /*#__PURE__*/React__default.default.forwardRef(function ButtonGroup({
  children,
  className,
  role,
  sx,
  ...rest
}, forwardRef) {
  const buttons = React__default.default.Children.map(children, (child, index) => /*#__PURE__*/jsxRuntime.jsx("div", {
    children: child
  }, index));
  const buttonRef = useProvidedRefOrCreate.useProvidedRefOrCreate(forwardRef);
  useFocusZone.useFocusZone({
    containerRef: buttonRef,
    disabled: role !== 'toolbar',
    bindKeys: behaviors.FocusKeys.ArrowHorizontal,
    focusOutBehavior: 'wrap'
  });
  if (sx !== defaultSxProp.defaultSxProp) {
    return /*#__PURE__*/jsxRuntime.jsx(Box, {
      as: "div",
      className: clsx.clsx(className, ButtonGroup_module.ButtonGroup),
      role: role,
      ...rest,
      sx: sx,
      ref: buttonRef,
      children: buttons
    });
  }
  return /*#__PURE__*/jsxRuntime.jsx("div", {
    ref: buttonRef,
    className: clsx.clsx(className, ButtonGroup_module.ButtonGroup),
    role: role,
    ...rest,
    children: buttons
  });
});
ButtonGroup.displayName = 'ButtonGroup';

module.exports = ButtonGroup;
