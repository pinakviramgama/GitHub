import { PlusIcon, ChevronDownIcon } from '@primer/octicons-react';
import React, { createElement, isValidElement } from 'react';
import { ActionList } from '../ActionList/index.js';
import { SubItem } from '../ActionList/Item.js';
import { ActionListContainerContext } from '../ActionList/ActionListContainerContext.js';
import '@styled-system/css';
import merge from 'deepmerge';
import { defaultSxProp } from '../utils/defaultSxProp.js';
import { useId } from '../hooks/useId.js';
import useIsomorphicLayoutEffect from '../utils/useIsomorphicLayoutEffect.js';
import classes from '../ActionList/ActionList.module.css.js';
import { flushSync } from 'react-dom';
import { BoxWithFallback } from '../internal/components/BoxWithFallback.js';
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import Box from '../Box/Box.js';

const Root = /*#__PURE__*/React.forwardRef(({
  children,
  ...props
}, ref) => {
  return /*#__PURE__*/jsx(BoxWithFallback, {
    as: "nav",
    ...props,
    ref: ref,
    children: /*#__PURE__*/jsx(ActionListContainerContext.Provider, {
      value: {
        container: 'NavList'
      },
      children: /*#__PURE__*/jsx(ActionList, {
        children: children
      })
    })
  });
});
Root.displayName = 'NavList';

// ----------------------------------------------------------------------------
// NavList.Item

const Item = /*#__PURE__*/React.forwardRef(({
  'aria-current': ariaCurrent,
  children,
  defaultOpen,
  sx: sxProp = defaultSxProp,
  ...props
}, ref) => {
  const {
    depth
  } = React.useContext(SubNavContext);

  // Get SubNav from children
  const subNav = React.Children.toArray(children).find(child => /*#__PURE__*/isValidElement(child) && child.type === SubNav);

  // Get children without SubNav or TrailingAction
  const childrenWithoutSubNavOrTrailingAction = React.Children.toArray(children).filter(child => /*#__PURE__*/isValidElement(child) ? child.type !== SubNav && child.type !== TrailingAction : true);
  if (! /*#__PURE__*/isValidElement(subNav) && defaultOpen)
    // eslint-disable-next-line no-console
    console.error('NavList.Item must have a NavList.SubNav to use defaultOpen.');

  // Render ItemWithSubNav if SubNav is present
  if (subNav && /*#__PURE__*/isValidElement(subNav)) {
    return /*#__PURE__*/jsx(ItemWithSubNav, {
      subNav: subNav,
      depth: depth,
      defaultOpen: defaultOpen,
      sx: sxProp,
      style: {
        '--subitem-depth': depth
      },
      children: childrenWithoutSubNavOrTrailingAction
    });
  }
  return /*#__PURE__*/jsx(ActionList.LinkItem, {
    ref: ref,
    "aria-current": ariaCurrent,
    active: Boolean(ariaCurrent) && ariaCurrent !== 'false',
    style: {
      '--subitem-depth': depth
    },
    ...props,
    children: children
  });
});
Item.displayName = 'NavList.Item';

// ----------------------------------------------------------------------------
// ItemWithSubNav (internal)

const ItemWithSubNavContext = /*#__PURE__*/React.createContext({
  buttonId: '',
  subNavId: '',
  isOpen: false
});
function ItemWithSubNav({
  children,
  subNav,
  depth: _depth,
  defaultOpen,
  style,
  sx: sxProp = defaultSxProp
}) {
  var _ref;
  const buttonId = useId();
  const subNavId = useId();
  const [isOpen, setIsOpen] = React.useState((_ref = defaultOpen || null) !== null && _ref !== void 0 ? _ref : false);
  const subNavRef = React.useRef(null);
  const [containsCurrentItem, setContainsCurrentItem] = React.useState(false);
  useIsomorphicLayoutEffect(() => {
    if (subNavRef.current) {
      // Check if SubNav contains current item
      // valid values: page, step, location, date, time, true and false
      const currentItem = subNavRef.current.querySelector('[aria-current]:not([aria-current=false])');
      if (currentItem) {
        setContainsCurrentItem(true);
        setIsOpen(true);
      }
    }
  }, [subNav, buttonId]);
  if (sxProp !== defaultSxProp) {
    return /*#__PURE__*/jsx(ItemWithSubNavContext.Provider, {
      value: {
        buttonId,
        subNavId,
        isOpen
      },
      children: /*#__PURE__*/jsxs(ActionList.Item, {
        id: buttonId,
        "aria-expanded": isOpen,
        "aria-controls": subNavId,
        active: !isOpen && containsCurrentItem,
        onSelect: () => setIsOpen(open => !open),
        style: style,
        sx: sxProp,
        children: [children, /*#__PURE__*/jsx(ActionList.TrailingVisual, {
          children: /*#__PURE__*/jsx(ChevronDownIcon, {
            className: classes.ExpandIcon
          })
        }), /*#__PURE__*/jsx(SubItem, {
          children: /*#__PURE__*/React.cloneElement(subNav, {
            ref: subNavRef
          })
        })]
      })
    });
  }
  return /*#__PURE__*/jsx(ItemWithSubNavContext.Provider, {
    value: {
      buttonId,
      subNavId,
      isOpen
    },
    children: /*#__PURE__*/jsxs(ActionList.Item, {
      id: buttonId,
      "aria-expanded": isOpen,
      "aria-controls": subNavId,
      active: !isOpen && containsCurrentItem,
      onSelect: () => setIsOpen(open => !open),
      style: style,
      children: [children, /*#__PURE__*/jsx(ActionList.TrailingVisual, {
        children: /*#__PURE__*/jsx(ChevronDownIcon, {
          className: classes.ExpandIcon
        })
      }), /*#__PURE__*/jsx(SubItem, {
        children: /*#__PURE__*/React.cloneElement(subNav, {
          ref: subNavRef
        })
      })]
    })
  });
}
ItemWithSubNav.displayName = "ItemWithSubNav"; // ----------------------------------------------------------------------------
// NavList.SubNav
const SubNavContext = /*#__PURE__*/React.createContext({
  depth: 0
});

// NOTE: SubNav must be a direct child of an Item
const SubNav = /*#__PURE__*/React.forwardRef(({
  children,
  sx: sxProp = defaultSxProp
}, forwardedRef) => {
  const {
    buttonId,
    subNavId
  } = React.useContext(ItemWithSubNavContext);
  const {
    depth
  } = React.useContext(SubNavContext);
  if (!buttonId || !subNavId) {
    // eslint-disable-next-line no-console
    console.error('NavList.SubNav must be a child of a NavList.Item');
  }
  if (depth > 3) {
    // TODO: write a more informative error message that directs people to rethink their IA
    // eslint-disable-next-line no-console
    console.error('NavList.SubNav only supports four levels of nesting');
    return null;
  }
  if (sxProp !== defaultSxProp) {
    return /*#__PURE__*/jsx(SubNavContext.Provider, {
      value: {
        depth: depth + 1
      },
      children: /*#__PURE__*/jsx(Box, {
        as: "ul",
        id: subNavId,
        "aria-labelledby": buttonId,
        className: classes.SubGroup,
        ref: forwardedRef,
        sx: sxProp,
        children: children
      })
    });
  }
  return /*#__PURE__*/jsx(SubNavContext.Provider, {
    value: {
      depth: depth + 1
    },
    children: /*#__PURE__*/jsx("ul", {
      className: classes.SubGroup,
      id: subNavId,
      "aria-labelledby": buttonId,
      ref: forwardedRef,
      children: children
    })
  });
});
SubNav.displayName = 'NavList.SubNav';

// ----------------------------------------------------------------------------
// NavList.LeadingVisual

const LeadingVisual = ActionList.LeadingVisual;
LeadingVisual.displayName = 'NavList.LeadingVisual';

// ----------------------------------------------------------------------------
// NavList.TrailingVisual

const TrailingVisual = ActionList.TrailingVisual;
TrailingVisual.displayName = 'NavList.TrailingVisual';

// ----------------------------------------------------------------------------
// NavList.Divider

const Divider = ActionList.Divider;
Divider.displayName = 'NavList.Divider';

// NavList.TrailingAction

const TrailingAction = ActionList.TrailingAction;
TrailingAction.displayName = 'NavList.TrailingAction';

// ----------------------------------------------------------------------------
// NavList.Group

const defaultSx = {};
const Group = ({
  title,
  children,
  sx: sxProp = defaultSx,
  ...props
}) => {
  if (sxProp !== defaultSx) {
    return /*#__PURE__*/jsxs(Box, {
      sx: sxProp,
      as: "li",
      "data-component": "ActionList.Group",
      children: [title ? /*#__PURE__*/jsx(ActionList.GroupHeading, {
        children: title
      }) : null, children]
    });
  }
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(ActionList.Divider, {}), /*#__PURE__*/jsxs(ActionList.Group, {
      ...props,
      children: [title ? /*#__PURE__*/jsx(ActionList.GroupHeading, {
        as: "h3",
        "data-component": "ActionList.GroupHeading",
        children: title
      }) : null, children]
    })]
  });
};
// ----------------------------------------------------------------------------
// NavList.GroupExpand

const GroupExpand = /*#__PURE__*/React.forwardRef(({
  label = 'Show more',
  pages = 0,
  items,
  renderItem,
  ...props
}, forwardedRef) => {
  const [currentPage, setCurrentPage] = React.useState(0);
  const groupId = useId();
  const itemsPerPage = items.length / pages;
  const amountToShow = pages === 0 ? items.length : Math.ceil(itemsPerPage * currentPage);
  const focusTargetIndex = currentPage === 1 ? 0 : amountToShow - Math.floor(itemsPerPage);
  return /*#__PURE__*/jsxs(Fragment, {
    children: [currentPage > 0 ? /*#__PURE__*/jsx(Fragment, {
      children: items.map((itemArr, index) => {
        const {
          text,
          trailingVisual: TrailingVisualIcon,
          leadingVisual: LeadingVisualIcon,
          trailingAction,
          ...rest
        } = itemArr;
        const {
          icon,
          label: actionLabel,
          ...actionProps
        } = trailingAction || {};
        const focusTarget = index === focusTargetIndex ? groupId : undefined;
        if (index < amountToShow) {
          if (renderItem) {
            return renderItem({
              ...itemArr,
              ['data-expand-focus-target']: focusTarget
            });
          }
          return /*#__PURE__*/createElement(Item, {
            ...rest,
            key: index,
            "data-expand-focus-target": focusTarget
          }, LeadingVisualIcon ? /*#__PURE__*/jsx(LeadingVisual, {
            children: /*#__PURE__*/jsx(LeadingVisualIcon, {})
          }) : null, text, TrailingVisualIcon ? /*#__PURE__*/jsx(TrailingVisual, {
            children: /*#__PURE__*/jsx(TrailingVisualIcon, {})
          }) : null, trailingAction ? /*#__PURE__*/jsx(TrailingAction, {
            ...actionProps,
            icon: icon,
            label: actionLabel || ''
          }) : null);
        }
      })
    }) : null, currentPage < pages || currentPage === 0 ? /*#__PURE__*/jsxs(ActionList.Item, {
      as: "button",
      "aria-expanded": "false",
      ref: forwardedRef,
      onSelect: () => {
        flushSync(() => {
          setCurrentPage(currentPage + 1);
        });
        const focusTarget = Array.from(document.querySelectorAll(`[data-expand-focus-target="${groupId}"]`));
        if (focusTarget.length > 0) {
          focusTarget[focusTarget.length - 1].focus();
        }
      },
      ...props,
      children: [label, /*#__PURE__*/jsx(TrailingVisual, {
        children: /*#__PURE__*/jsx(PlusIcon, {})
      })]
    }) : null]
  });
});

// ----------------------------------------------------------------------------
// NavList.GroupHeading

/**
 * This is an alternative to the `title` prop on `NavList.Group`.
 * It was primarily added to allow links in group headings.
 */
const GroupHeading = ({
  as = 'h3',
  sx: sxProp = defaultSxProp,
  ...rest
}) => {
  return /*#__PURE__*/jsx(ActionList.GroupHeading, {
    as: as,
    sx: merge({
      '> a {': {
        color: 'var(--fgColor-default)',
        textDecoration: 'inherit',
        ':hover': {
          textDecoration: 'underline'
        }
      }
    }, sxProp),
    "data-component": "NavList.GroupHeading",
    headingWrapElement: "li",
    ...rest
  });
};
GroupHeading.displayName = "GroupHeading";
// ----------------------------------------------------------------------------
// Export

const NavList = Object.assign(Root, {
  Item,
  SubNav,
  LeadingVisual,
  TrailingVisual,
  TrailingAction,
  Divider,
  Group,
  GroupExpand,
  GroupHeading
});

export { GroupExpand, NavList };
