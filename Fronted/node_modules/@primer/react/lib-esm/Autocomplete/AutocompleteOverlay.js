import { useContext, useCallback } from 'react';
import { AutocompleteContext } from './AutocompleteContext.js';
import { useRefObjectAsForwardedRef } from '../hooks/useRefObjectAsForwardedRef.js';
import VisuallyHidden from '../_VisuallyHidden.js';
import classes from './AutocompleteOverlay.module.css.js';
import { jsx } from 'react/jsx-runtime';
import { useAnchoredPosition } from '../hooks/useAnchoredPosition.js';
import Overlay from '../Overlay/Overlay.js';

// TODO: consider making 'aria-labelledby' required

function AutocompleteOverlay({
  menuAnchorRef,
  overlayProps: oldOverlayProps,
  children,
  ...newOverlayProps
}) {
  const autocompleteContext = useContext(AutocompleteContext);
  if (autocompleteContext === null) {
    throw new Error('AutocompleteContext returned null values');
  }
  const overlayProps = {
    ...oldOverlayProps,
    ...newOverlayProps
  };
  const {
    inputRef,
    scrollContainerRef,
    selectedItemLength,
    setShowMenu,
    showMenu = false
  } = autocompleteContext;
  const {
    floatingElementRef,
    position
  } = useAnchoredPosition({
    side: 'outside-bottom',
    align: 'start',
    anchorElementRef: menuAnchorRef ? menuAnchorRef : inputRef
  }, [showMenu, selectedItemLength]);
  useRefObjectAsForwardedRef(scrollContainerRef, floatingElementRef);
  const closeOptionList = useCallback(() => {
    setShowMenu(false);
  }, [setShowMenu]);
  if (typeof window === 'undefined') {
    return null;
  }
  return showMenu ? /*#__PURE__*/jsx(Overlay, {
    returnFocusRef: inputRef,
    preventFocusOnOpen: true,
    onClickOutside: closeOptionList,
    onEscape: closeOptionList,
    ref: floatingElementRef,
    top: position === null || position === void 0 ? void 0 : position.top,
    left: position === null || position === void 0 ? void 0 : position.left,
    className: classes.Overlay,
    ...overlayProps,
    children: children
  }) :
  /*#__PURE__*/
  // HACK: This ensures AutocompleteMenu is still mounted when closing the menu and all of the hooks inside of it are still called.
  // A better way to do this would be to move the hooks to AutocompleteOverlay or somewhere that won't get unmounted.
  jsx(VisuallyHidden, {
    "aria-hidden": "true",
    children: children
  });
}
AutocompleteOverlay.displayName = 'AutocompleteOverlay';

export { AutocompleteOverlay as default };
