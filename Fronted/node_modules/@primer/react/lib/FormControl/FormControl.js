'use strict';

var clsx = require('clsx');
var React = require('react');
var Select = require('../Select/Select.js');
var ValidationAnimationContainer = require('../internal/components/ValidationAnimationContainer.js');
var useSlots = require('../hooks/useSlots.js');
var useId = require('../hooks/useId.js');
var FormControlCaption = require('./FormControlCaption.js');
var FormControlLabel = require('./FormControlLabel.js');
var FormControlLeadingVisual = require('./FormControlLeadingVisual.js');
var _FormControlValidation = require('./_FormControlValidation.js');
var _FormControlContext = require('./_FormControlContext.js');
var warning = require('../utils/warning.js');
var FormControl_module = require('./FormControl.module.css.js');
var defaultSxProp = require('../utils/defaultSxProp.js');
var jsxRuntime = require('react/jsx-runtime');
var CheckboxOrRadioGroupContext = require('../internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroupContext.js');
var Autocomplete = require('../Autocomplete/Autocomplete.js');
var Checkbox = require('../Checkbox/Checkbox.js');
var Radio = require('../Radio/Radio.js');
var TextInput = require('../TextInput/TextInput.js');
var TextInputWithTokens = require('../TextInputWithTokens/TextInputWithTokens.js');
var Textarea = require('../Textarea/Textarea.js');
var SelectPanel = require('../SelectPanel/SelectPanel.js');
var Box = require('../Box/Box.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const FormControl = /*#__PURE__*/React__default.default.forwardRef(({
  children,
  disabled: disabledProp,
  layout = 'vertical',
  id: idProp,
  required,
  sx,
  className
}, ref) => {
  var _slots$validation, _slots$label;
  const [slots, childrenWithoutSlots] = useSlots.useSlots(children, {
    caption: FormControlCaption.FormControlCaption,
    label: FormControlLabel,
    leadingVisual: FormControlLeadingVisual,
    validation: _FormControlValidation
  });
  const expectedInputComponents = [Autocomplete, Checkbox, Radio, Select, TextInput, TextInputWithTokens, Textarea.default, SelectPanel.SelectPanel];
  const choiceGroupContext = React.useContext(CheckboxOrRadioGroupContext);
  const disabled = choiceGroupContext.disabled || disabledProp;
  const id = useId.useId(idProp);
  const validationMessageId = slots.validation ? `${id}-validationMessage` : undefined;
  const captionId = slots.caption ? `${id}-caption` : undefined;
  const validationStatus = (_slots$validation = slots.validation) === null || _slots$validation === void 0 ? void 0 : _slots$validation.props.variant;
  const InputComponent = childrenWithoutSlots.find(child => expectedInputComponents.some(inputComponent => /*#__PURE__*/React__default.default.isValidElement(child) && child.type === inputComponent));
  const inputProps = /*#__PURE__*/React__default.default.isValidElement(InputComponent) && InputComponent.props;
  const isChoiceInput = /*#__PURE__*/React__default.default.isValidElement(InputComponent) && (InputComponent.type === Checkbox || InputComponent.type === Radio);
  const isRadioInput = /*#__PURE__*/React__default.default.isValidElement(InputComponent) && InputComponent.type === Radio;
  if (InputComponent) {
    process.env.NODE_ENV !== "production" ? warning.warning(inputProps === null || inputProps === void 0 ? void 0 : inputProps.id, `instead of passing the 'id' prop directly to the input component, it should be passed to the parent component, <FormControl>`) : void 0;
    process.env.NODE_ENV !== "production" ? warning.warning(inputProps === null || inputProps === void 0 ? void 0 : inputProps.disabled, `instead of passing the 'disabled' prop directly to the input component, it should be passed to the parent component, <FormControl>`) : void 0;
    process.env.NODE_ENV !== "production" ? warning.warning(inputProps === null || inputProps === void 0 ? void 0 : inputProps.required, `instead of passing the 'required' prop directly to the input component, it should be passed to the parent component, <FormControl>`) : void 0;
  }
  if (!slots.label) {
    // eslint-disable-next-line no-console
    console.error(`The input field with the id ${id} MUST have a FormControl.Label child.\n\nIf you want to hide the label, pass the 'visuallyHidden' prop to the FormControl.Label component.`);
  }
  if (isChoiceInput) {
    process.env.NODE_ENV !== "production" ? warning.warning(!!slots.validation, 'Validation messages are not rendered for an individual checkbox or radio. The validation message should be shown for all options.') : void 0;
    process.env.NODE_ENV !== "production" ? warning.warning(isRadioInput && childrenWithoutSlots.find(child => {
      var _child$props;
      return /*#__PURE__*/React__default.default.isValidElement(child) && ((_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.required);
    }), 'An individual radio cannot be a required field.') : void 0;
  } else {
    process.env.NODE_ENV !== "production" ? warning.warning(!!slots.leadingVisual, 'A leading visual is only rendered for a checkbox or radio form control. If you want to render a leading visual inside of your input, check if your input supports a leading visual.') : void 0;
  }
  const isLabelHidden = (_slots$label = slots.label) === null || _slots$label === void 0 ? void 0 : _slots$label.props.visuallyHidden;
  const InputChildren = /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [/*#__PURE__*/jsxRuntime.jsxs("div", {
      className: FormControl_module.ControlChoiceInputs,
      children: [/*#__PURE__*/React__default.default.isValidElement(InputComponent) ? /*#__PURE__*/React__default.default.cloneElement(InputComponent, {
        id,
        disabled,
        // allow checkboxes to be required
        required: required && !isRadioInput,
        ['aria-describedby']: captionId
      }) : null, childrenWithoutSlots.filter(child => /*#__PURE__*/React__default.default.isValidElement(child) && ![Checkbox, Radio].some(inputComponent => child.type === inputComponent))]
    }), slots.leadingVisual ? /*#__PURE__*/jsxRuntime.jsx("div", {
      className: FormControl_module.LeadingVisual,
      "data-disabled": disabled ? '' : undefined,
      "data-has-caption": slots.caption ? '' : undefined,
      children: slots.leadingVisual
    }) : null, /*#__PURE__*/jsxRuntime.jsxs("div", {
      className: FormControl_module.LabelContainer,
      children: [slots.label, slots.caption]
    })]
  });
  return /*#__PURE__*/jsxRuntime.jsx(_FormControlContext.FormControlContextProvider, {
    value: {
      captionId,
      disabled,
      id,
      required,
      validationMessageId
    },
    children: isChoiceInput || layout === 'horizontal' ? sx !== defaultSxProp.defaultSxProp ? /*#__PURE__*/jsxRuntime.jsx(Box, {
      ref: ref,
      "data-has-leading-visual": slots.leadingVisual ? '' : undefined,
      sx: sx,
      className: clsx.clsx(className, FormControl_module.ControlHorizontalLayout),
      children: InputChildren
    }) : /*#__PURE__*/jsxRuntime.jsx("div", {
      ref: ref,
      "data-has-leading-visual": slots.leadingVisual ? '' : undefined,
      className: clsx.clsx(className, FormControl_module.ControlHorizontalLayout),
      children: InputChildren
    }) : /*#__PURE__*/jsxRuntime.jsxs(Box, {
      ref: ref,
      "data-has-label": !isLabelHidden ? '' : undefined,
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-start",
      sx: sx,
      className: clsx.clsx(className, FormControl_module.ControlVerticalLayout),
      children: [slots.label, /*#__PURE__*/React__default.default.isValidElement(InputComponent) && /*#__PURE__*/React__default.default.cloneElement(InputComponent, Object.assign({
        id,
        required,
        disabled,
        validationStatus,
        ['aria-describedby']: [validationMessageId, captionId].filter(Boolean).join(' ')
      }, InputComponent.props)), childrenWithoutSlots.filter(child => /*#__PURE__*/React__default.default.isValidElement(child) && !expectedInputComponents.some(inputComponent => child.type === inputComponent)), slots.validation ? /*#__PURE__*/jsxRuntime.jsx(ValidationAnimationContainer, {
        show: true,
        children: slots.validation
      }) : null, slots.caption]
    })
  });
});
var FormControl$1 = Object.assign(FormControl, {
  Caption: FormControlCaption.FormControlCaption,
  Label: FormControlLabel,
  LeadingVisual: FormControlLeadingVisual,
  Validation: _FormControlValidation
});

module.exports = FormControl$1;
