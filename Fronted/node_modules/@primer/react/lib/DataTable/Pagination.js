'use strict';

var octiconsReact = require('@primer/octicons-react');
var React = require('react');
var styled = require('styled-components');
var constants = require('../constants.js');
var ButtonReset = require('../internal/components/ButtonReset.js');
var LiveRegion = require('../internal/components/LiveRegion.js');
var warning = require('../utils/warning.js');
var useResponsiveValue = require('../hooks/useResponsiveValue.js');
var model = require('../Pagination/model.js');
var jsxRuntime = require('react/jsx-runtime');
var VisuallyHidden = require('../VisuallyHidden/VisuallyHidden.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var styled__default = /*#__PURE__*/_interopDefault(styled);

const StyledPagination = styled__default.default.nav.withConfig({
  displayName: "Pagination__StyledPagination",
  componentId: "sc-1auq45q-0"
})(["display:flex;align-items:center;justify-content:space-between;column-gap:1rem;width:100%;grid-area:footer;padding:0.5rem 1rem;border:1px solid ", ";border-top-width:0;border-end-start-radius:6px;border-end-end-radius:6px;.TablePaginationRange{color:", ";font-size:0.75rem;margin:0;}.TablePaginationSteps{display:flex;align-items:center;flex-wrap:wrap;list-style:none;color:", ";font-size:0.875rem;margin:0;padding:0;}.TablePaginationStep:first-of-type{margin-right:1rem;}.TablePaginationStep:last-of-type{margin-left:1rem;}.TablePaginationAction{display:flex;align-items:center;color:", ";font-size:0.875rem;line-height:calc(20 / 14);user-select:none;padding:0.5rem;border-radius:6px;}.TablePaginationAction[data-has-page]{color:", ";}.TablePaginationPage{min-width:2rem;min-height:2rem;display:flex;align-items:center;justify-content:center;font-size:0.875rem;line-height:calc(20 / 14);user-select:none;border-radius:6px;padding:0.5rem calc((2rem - 1.25rem) / 2);}.TablePaginationAction[data-has-page]:hover,.TablePaginationAction[data-has-page]:focus,.TablePaginationPage:hover,.TablePaginationPage:focus{background-color:", ";}.TablePaginationPage[data-active='true']{background-color:", ";color:", ";}.TablePaginationPage[data-active='true']:focus-visible{outline:2px solid var(--bgColor-accent-emphasis);outline-offset:-2px;box-shadow:inset 0 0 0 3px var(--fgColor-onEmphasis);}.TablePaginationTruncationStep{display:flex;align-items:center;justify-content:center;min-width:2rem;min-height:2rem;user-select:none;}", ""], constants.get('colors.border.default'), constants.get('colors.fg.muted'), constants.get('colors.fg.default'), constants.get('colors.fg.muted'), constants.get('colors.accent.fg'), constants.get('colors.actionListItem.default.hoverBg'), constants.get('colors.accent.emphasis'), constants.get('colors.fg.onEmphasis'),
// Hides pages based on the viewport range passed to `showPages`
Object.keys(useResponsiveValue.viewportRanges).map(viewportRangeKey => {
  return `
      @media (${useResponsiveValue.viewportRanges[viewportRangeKey]}) {
        .TablePaginationSteps[data-hidden-viewport-ranges*='${viewportRangeKey}'] > *:not(:first-child):not(:last-child) {
          display: none;
        }

        .TablePaginationSteps[data-hidden-viewport-ranges*='${viewportRangeKey}'] > *:first-child {
          margin-inline-end: 0;
        }

        .TablePaginationSteps[data-hidden-viewport-ranges*='${viewportRangeKey}'] > *:last-child {
          margin-inline-start: 0;
        }
      }
    `;
}).join(''));
const defaultShowPages = {
  narrow: false
};
function Pagination({
  'aria-label': label,
  defaultPageIndex,
  id,
  onChange,
  pageSize = 25,
  showPages = defaultShowPages,
  totalCount
}) {
  const {
    pageIndex,
    pageStart,
    pageEnd,
    pageCount,
    hasPreviousPage,
    hasNextPage,
    selectPage,
    selectNextPage,
    selectPreviousPage
  } = usePagination({
    defaultPageIndex,
    onChange,
    pageSize,
    totalCount
  });
  const getViewportRangesToHidePages = React.useCallback(() => {
    if (typeof showPages !== 'boolean') {
      return Object.keys(showPages).filter(key => !showPages[key]);
    }
    if (showPages) {
      return [];
    } else {
      return Object.keys(useResponsiveValue.viewportRanges);
    }
  }, [showPages]);
  const model$1 = React.useMemo(() => {
    return model.buildPaginationModel(pageCount, pageIndex + 1, !!showPages, 1, 2);
  }, [pageCount, pageIndex, showPages]);
  return /*#__PURE__*/jsxRuntime.jsxs(LiveRegion.LiveRegion, {
    children: [/*#__PURE__*/jsxRuntime.jsx(LiveRegion.LiveRegionOutlet, {}), /*#__PURE__*/jsxRuntime.jsxs(StyledPagination, {
      "aria-label": label,
      className: "TablePagination",
      id: id,
      children: [/*#__PURE__*/jsxRuntime.jsx(Range, {
        pageStart: pageStart,
        pageEnd: pageEnd,
        totalCount: totalCount
      }), /*#__PURE__*/jsxRuntime.jsxs("ol", {
        className: "TablePaginationSteps",
        "data-hidden-viewport-ranges": getViewportRangesToHidePages().join(' '),
        children: [/*#__PURE__*/jsxRuntime.jsx(Step, {
          children: /*#__PURE__*/jsxRuntime.jsxs(ButtonReset.Button, {
            className: "TablePaginationAction",
            type: "button",
            "data-has-page": hasPreviousPage ? true : undefined,
            "aria-disabled": !hasPreviousPage ? true : undefined,
            onClick: () => {
              if (!hasPreviousPage) {
                return;
              }
              selectPreviousPage();
            },
            children: [hasPreviousPage ? /*#__PURE__*/jsxRuntime.jsx(octiconsReact.ChevronLeftIcon, {}) : null, /*#__PURE__*/jsxRuntime.jsx("span", {
              className: "TablePaginationActionLabel",
              children: "Previous"
            }), /*#__PURE__*/jsxRuntime.jsx(VisuallyHidden.VisuallyHidden, {
              children: "\xA0page"
            })]
          })
        }), model$1.map((page, i) => {
          if (page.type === 'BREAK') {
            return /*#__PURE__*/jsxRuntime.jsx(TruncationStep, {}, `truncation-${i}`);
          } else if (page.type === 'NUM') {
            return /*#__PURE__*/jsxRuntime.jsx(Step, {
              children: /*#__PURE__*/jsxRuntime.jsxs(Page, {
                active: !!page.selected,
                onClick: () => {
                  selectPage(page.num - 1);
                },
                children: [page.num, page.precedesBreak ? /*#__PURE__*/jsxRuntime.jsx(VisuallyHidden.VisuallyHidden, {
                  children: "\u2026"
                }) : null]
              })
            }, i);
          }
        }), /*#__PURE__*/jsxRuntime.jsx(Step, {
          children: /*#__PURE__*/jsxRuntime.jsxs(ButtonReset.Button, {
            className: "TablePaginationAction",
            type: "button",
            "data-has-page": hasNextPage ? true : undefined,
            "aria-disabled": !hasNextPage ? true : undefined,
            onClick: () => {
              if (!hasNextPage) {
                return;
              }
              selectNextPage();
            },
            children: [/*#__PURE__*/jsxRuntime.jsx("span", {
              className: "TablePaginationActionLabel",
              children: "Next"
            }), /*#__PURE__*/jsxRuntime.jsx(VisuallyHidden.VisuallyHidden, {
              children: "\xA0page"
            }), hasNextPage ? /*#__PURE__*/jsxRuntime.jsx(octiconsReact.ChevronRightIcon, {}) : null]
          })
        })]
      })]
    })]
  });
}
Pagination.displayName = "Pagination";
function Range({
  pageStart,
  pageEnd,
  totalCount
}) {
  const start = pageStart + 1;
  const end = pageEnd;
  return /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [/*#__PURE__*/jsxRuntime.jsx(LiveRegion.Message, {
      value: `Showing ${start} through ${end} of ${totalCount}`
    }), /*#__PURE__*/jsxRuntime.jsxs("p", {
      className: "TablePaginationRange",
      children: [start, /*#__PURE__*/jsxRuntime.jsx(VisuallyHidden.VisuallyHidden, {
        children: "\xA0through\xA0"
      }), /*#__PURE__*/jsxRuntime.jsx("span", {
        "aria-hidden": "true",
        children: "\u2012"
      }), end, " of ", totalCount]
    })]
  });
}
function TruncationStep() {
  return /*#__PURE__*/jsxRuntime.jsx("li", {
    "aria-hidden": "true",
    className: "TablePaginationTruncationStep",
    children: "\u2026"
  });
}
TruncationStep.displayName = "TruncationStep";
function Step({
  children
}) {
  return /*#__PURE__*/jsxRuntime.jsx("li", {
    className: "TablePaginationStep",
    children: children
  });
}
Step.displayName = "Step";
function Page({
  active,
  children,
  onClick
}) {
  return /*#__PURE__*/jsxRuntime.jsxs(ButtonReset.Button, {
    className: "TablePaginationPage",
    type: "button",
    "data-active": active ? true : undefined,
    "aria-current": active ? true : undefined,
    onClick: onClick,
    children: [/*#__PURE__*/jsxRuntime.jsx(VisuallyHidden.VisuallyHidden, {
      children: "Page\xA0"
    }), children]
  });
}
Page.displayName = "Page";
function usePagination(config) {
  const {
    defaultPageIndex,
    onChange,
    pageSize,
    totalCount
  } = config;
  const pageCount = Math.ceil(totalCount / pageSize);
  const [defaultIndex, setDefaultIndex] = React.useState(() => {
    if (defaultPageIndex !== undefined) {
      if (defaultPageIndex >= 0 && defaultPageIndex < pageCount) {
        return defaultPageIndex;
      }
      process.env.NODE_ENV !== "production" ? warning.warning(true,
      // eslint-disable-next-line github/unescaped-html-literal
      '<Pagination> expected `defaultPageIndex` to be less than the ' + 'total number of pages. Instead, received a `defaultPageIndex` ' + 'of %s with %s total pages.', defaultPageIndex, pageCount) : void 0;
    }
    return 0;
  });
  const [pageIndex, setPageIndex] = React.useState(defaultIndex);
  const validDefaultPageCount = defaultPageIndex !== undefined && defaultPageIndex >= 0 && defaultPageIndex < pageCount;
  if (validDefaultPageCount && defaultIndex !== defaultPageIndex) {
    setDefaultIndex(defaultPageIndex);
    setPageIndex(defaultPageIndex);
    onChange === null || onChange === void 0 ? void 0 : onChange({
      pageIndex: defaultPageIndex
    });
  }
  const pageStart = pageIndex * pageSize;
  const pageEnd = Math.min((pageIndex + 1) * pageSize, totalCount);
  const hasNextPage = pageIndex + 1 < pageCount;
  const hasPreviousPage = pageIndex > 0;
  function selectPage(newPageIndex) {
    if (pageIndex !== newPageIndex) {
      setPageIndex(newPageIndex);
      onChange === null || onChange === void 0 ? void 0 : onChange({
        pageIndex: newPageIndex
      });
    }
  }
  function selectPreviousPage() {
    if (hasPreviousPage) {
      selectPage(pageIndex - 1);
    }
  }
  function selectNextPage() {
    if (hasNextPage) {
      selectPage(pageIndex + 1);
    }
  }
  return {
    pageIndex,
    pageStart,
    pageEnd,
    pageCount,
    hasNextPage,
    hasPreviousPage,
    selectPage,
    selectPreviousPage,
    selectNextPage
  };
}

exports.Pagination = Pagination;
