import { SortAscIcon, SortDescIcon } from '@primer/octicons-react';
import { clsx } from 'clsx';
import React from 'react';
import VisuallyHidden from '../_VisuallyHidden.js';
import { SortDirection } from './sorting.js';
import { useTableLayout } from './useTable.js';
import { SkeletonText } from '../experimental/Skeleton/SkeletonText.js';
import { Button } from '../internal/components/ButtonReset.js';
import classes from './Table.module.css.js';
import { defaultSxProp } from '../utils/defaultSxProp.js';
import { BoxWithFallback } from '../internal/components/BoxWithFallback.js';
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { ScrollableRegion } from '../ScrollableRegion/ScrollableRegion.js';
import Text from '../Text/Text.js';

const Table = /*#__PURE__*/React.forwardRef(function Table({
  'aria-labelledby': labelledby,
  cellPadding = 'normal',
  className,
  gridTemplateColumns,
  ...rest
}, ref) {
  return (
    /*#__PURE__*/
    // TODO update type to be non-optional in next major release
    // @ts-expect-error this type should be required in the next major version
    jsx(ScrollableRegion, {
      "aria-labelledby": labelledby,
      className: clsx('TableOverflowWrapper', classes.TableOverflowWrapper),
      children: /*#__PURE__*/jsx("table", {
        ...rest,
        "aria-labelledby": labelledby,
        "data-cell-padding": cellPadding,
        className: clsx(className, 'Table', classes.Table),
        role: "table",
        ref: ref,
        style: {
          '--grid-template-columns': gridTemplateColumns
        }
      })
    })
  );
});

// ----------------------------------------------------------------------------
// TableHead
// ----------------------------------------------------------------------------

function TableHead({
  children
}) {
  return (
    /*#__PURE__*/
    // We need to explicitly pass this role because some ATs and browsers drop table semantics
    // when we use `display: contents` or `display: grid` in the table
    jsx("thead", {
      className: clsx('TableHead', classes.TableHead),
      role: "rowgroup",
      children: children
    })
  );
}
TableHead.displayName = "TableHead"; // ----------------------------------------------------------------------------
// TableBody
// ----------------------------------------------------------------------------
function TableBody({
  children
}) {
  return (
    /*#__PURE__*/
    // We need to explicitly pass this role because some ATs and browsers drop table semantics
    // when we use `display: contents` or `display: grid` in the table
    jsx("tbody", {
      className: clsx('TableBody', classes.TableBody),
      role: "rowgroup",
      children: children
    })
  );
}
TableBody.displayName = "TableBody"; // ----------------------------------------------------------------------------
// TableHeader
// ----------------------------------------------------------------------------
function TableHeader({
  align,
  children,
  ...rest
}) {
  return /*#__PURE__*/jsx("th", {
    ...rest,
    className: clsx('TableHeader', classes.TableHeader),
    role: "columnheader",
    scope: "col",
    "data-cell-align": align,
    children: children
  });
}
TableHeader.displayName = "TableHeader";
function TableSortHeader({
  align,
  children,
  direction,
  onToggleSort,
  ...rest
}) {
  const ariaSort = direction === 'DESC' ? 'descending' : direction === 'ASC' ? 'ascending' : undefined;
  return /*#__PURE__*/jsx(TableHeader, {
    ...rest,
    "aria-sort": ariaSort,
    align: align,
    children: /*#__PURE__*/jsxs(Button, {
      type: "button",
      className: clsx('TableSortButton', classes.TableSortButton),
      onClick: () => {
        onToggleSort();
      },
      children: [children, direction === SortDirection.NONE || direction === SortDirection.ASC ? /*#__PURE__*/jsxs(Fragment, {
        children: [/*#__PURE__*/jsx(SortAscIcon, {
          className: clsx('TableSortIcon', 'TableSortIcon--ascending', classes.TableSortIcon, classes['TableSortIcon--ascending'])
        }), direction === SortDirection.NONE ? /*#__PURE__*/jsx(VisuallyHidden, {
          children: "sort ascending"
        }) : null]
      }) : null, direction === SortDirection.DESC ? /*#__PURE__*/jsx(SortDescIcon, {
        className: clsx('TableSortIcon', 'TableSortIcon--descending', classes.TableSortIcon, classes['TableSortIcon--descending'])
      }) : null]
    })
  });
}
TableSortHeader.displayName = "TableSortHeader"; // ----------------------------------------------------------------------------
// TableRow
// ----------------------------------------------------------------------------
function TableRow({
  children,
  ...rest
}) {
  return /*#__PURE__*/jsx("tr", {
    ...rest,
    className: clsx('TableRow', classes.TableRow),
    role: "row",
    children: children
  });
}
TableRow.displayName = "TableRow"; // ----------------------------------------------------------------------------
// TableCell
// ----------------------------------------------------------------------------
function TableCell({
  align,
  className,
  children,
  scope,
  ...rest
}) {
  const BaseComponent = scope ? 'th' : 'td';
  const role = scope ? 'rowheader' : 'cell';
  return /*#__PURE__*/jsx(BaseComponent, {
    ...rest,
    className: clsx('TableCell', className, classes.TableCell),
    scope: scope,
    role: role,
    "data-cell-align": align,
    children: children
  });
}
TableCell.displayName = "TableCell";
function TableCellPlaceholder({
  children
}) {
  return /*#__PURE__*/jsx(Text, {
    color: "fg.subtle",
    children: children
  });
}
TableCellPlaceholder.displayName = "TableCellPlaceholder"; // ----------------------------------------------------------------------------
// TableContainer
// ----------------------------------------------------------------------------
function TableContainer({
  children,
  className,
  sx: sxProp = defaultSxProp,
  ...rest
}) {
  return /*#__PURE__*/jsx(BoxWithFallback, {
    ...rest,
    className: clsx(className, classes.TableContainer),
    sx: sxProp,
    children: children
  });
}
TableContainer.displayName = "TableContainer";
const TableTitle = /*#__PURE__*/React.forwardRef(function TableTitle({
  as: Component = 'h2',
  children,
  id
}, ref) {
  const BaseComponent = Component;
  return /*#__PURE__*/jsx(BaseComponent, {
    className: clsx('TableTitle', classes.TableTitle),
    id: id,
    ref: ref,
    children: children
  });
});
function TableSubtitle({
  as: BaseComponent = 'div',
  children,
  id
}) {
  return /*#__PURE__*/jsx(BaseComponent, {
    className: clsx('TableSubtitle', classes.TableSubtitle),
    id: id,
    children: children
  });
}
TableSubtitle.displayName = "TableSubtitle";
function TableDivider() {
  return /*#__PURE__*/jsx("div", {
    className: clsx('TableDivider', classes.TableDivider),
    role: "presentation"
  });
}
TableDivider.displayName = "TableDivider";
function TableActions({
  children
}) {
  return /*#__PURE__*/jsx("div", {
    className: clsx('TableActions', classes.TableActions),
    children: children
  });
}
TableActions.displayName = "TableActions"; // ----------------------------------------------------------------------------
// TableSkeleton
// ----------------------------------------------------------------------------
function TableSkeleton({
  cellPadding,
  columns,
  rows = 10,
  ...rest
}) {
  const {
    gridTemplateColumns
  } = useTableLayout(columns);
  return /*#__PURE__*/jsxs(Table, {
    ...rest,
    cellPadding: cellPadding,
    gridTemplateColumns: gridTemplateColumns,
    children: [/*#__PURE__*/jsx(TableHead, {
      children: /*#__PURE__*/jsx(TableRow, {
        children: Array.isArray(columns) ? columns.map((column, i) => {
          return /*#__PURE__*/jsx(TableHeader, {
            children: typeof column.header === 'string' ? column.header : column.header()
          }, i);
        }) : null
      })
    }), /*#__PURE__*/jsx(TableBody, {
      children: /*#__PURE__*/jsx(TableRow, {
        children: Array.from({
          length: columns.length
        }).map((_, i) => {
          return /*#__PURE__*/jsxs(TableCell, {
            className: clsx('TableCellSkeleton', classes.TableCellSkeleton),
            children: [/*#__PURE__*/jsx(VisuallyHidden, {
              children: "Loading"
            }), /*#__PURE__*/jsx("div", {
              className: clsx('TableCellSkeletonItems', classes.TableCellSkeletonItems),
              children: Array.from({
                length: rows
              }).map((_, i) => {
                return /*#__PURE__*/jsx("div", {
                  className: clsx('TableCellSkeletonItem', classes.TableCellSkeletonItem),
                  children: /*#__PURE__*/jsx(SkeletonText, {})
                }, i);
              })
            })]
          }, i);
        })
      })
    })]
  });
}
TableSkeleton.displayName = "TableSkeleton";

export { Table, TableActions, TableBody, TableCell, TableCellPlaceholder, TableContainer, TableDivider, TableHead, TableHeader, TableRow, TableSkeleton, TableSortHeader, TableSubtitle, TableTitle };
