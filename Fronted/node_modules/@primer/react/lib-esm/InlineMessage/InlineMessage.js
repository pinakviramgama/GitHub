import { AlertFillIcon, CheckCircleFillIcon, AlertIcon, CheckCircleIcon } from '@primer/octicons-react';
import { clsx } from 'clsx';
import classes from './InlineMessage.module.css.js';
import { defaultSxProp } from '../utils/defaultSxProp.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import Box from '../Box/Box.js';

const variantToIcon = variant => {
  const icons = {
    warning: /*#__PURE__*/jsx(AlertIcon, {
      className: classes.InlineMessageIcon
    }),
    critical: /*#__PURE__*/jsx(AlertIcon, {
      className: classes.InlineMessageIcon
    }),
    success: /*#__PURE__*/jsx(CheckCircleIcon, {
      className: classes.InlineMessageIcon
    }),
    unavailable: /*#__PURE__*/jsx(AlertIcon, {
      className: classes.InlineMessageIcon
    })
  };
  return icons[variant];
};
const variantToSmallIcon = variant => {
  const icons = {
    warning: /*#__PURE__*/jsx(AlertFillIcon, {
      className: classes.InlineMessageIcon,
      size: 12
    }),
    critical: /*#__PURE__*/jsx(AlertFillIcon, {
      className: classes.InlineMessageIcon,
      size: 12
    }),
    success: /*#__PURE__*/jsx(CheckCircleFillIcon, {
      className: classes.InlineMessageIcon,
      size: 12
    }),
    unavailable: /*#__PURE__*/jsx(AlertFillIcon, {
      className: classes.InlineMessageIcon,
      size: 12
    })
  };
  return icons[variant];
};
function InlineMessage({
  children,
  className,
  size = 'medium',
  variant,
  sx: sxProp = defaultSxProp,
  ...rest
}) {
  const icon = size === 'small' ? variantToSmallIcon(variant) : variantToIcon(variant);
  if (sxProp !== defaultSxProp) {
    return /*#__PURE__*/jsxs(Box, {
      sx: sxProp,
      className: clsx(className, classes.InlineMessage),
      ...rest,
      "data-size": size,
      "data-variant": variant,
      children: [icon, children]
    });
  }
  return /*#__PURE__*/jsxs("div", {
    className: clsx(className, classes.InlineMessage),
    ...rest,
    "data-size": size,
    "data-variant": variant,
    children: [icon, children]
  });
}
InlineMessage.displayName = "InlineMessage";

export { InlineMessage };
