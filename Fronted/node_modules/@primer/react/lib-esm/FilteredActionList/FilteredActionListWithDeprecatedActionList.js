import { scrollIntoView } from '@primer/behaviors';
import { useCallback, useRef, useState, useEffect } from 'react';
import styled from 'styled-components';
import { get } from '../constants.js';
import { ActionList } from '../deprecated/ActionList/index.js';
import { useFocusZone } from '../hooks/useFocusZone.js';
import { useId } from '../hooks/useId.js';
import { useProvidedRefOrCreate } from '../hooks/useProvidedRefOrCreate.js';
import { useProvidedStateOrCreate } from '../hooks/useProvidedStateOrCreate.js';
import useScrollFlash from '../hooks/useScrollFlash.js';
import { FilteredActionListLoadingTypes, FilteredActionListBodyLoader } from './FilteredActionListLoaders.js';
import { announce } from '@primer/live-region-element';
import { debounce } from '../node_modules/@github/mini-throttle/dist/index.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import Box from '../Box/Box.js';
import TextInput from '../TextInput/TextInput.js';
import { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden.js';

const menuScrollMargins = {
  startMargin: 0,
  endMargin: 8
};
const StyledHeader = styled.div.withConfig({
  displayName: "FilteredActionListWithDeprecatedActionList__StyledHeader",
  componentId: "sc-o1spcd-0"
})(["box-shadow:0 1px 0 ", ";z-index:1;"], get('colors.border.default'));
const getItemWithActiveDescendant = (listRef, items) => {
  const listElement = listRef.current;
  const activeItemElement = listElement === null || listElement === void 0 ? void 0 : listElement.querySelector('[data-is-active-descendant]');
  if (!listElement || !(activeItemElement !== null && activeItemElement !== void 0 && activeItemElement.textContent)) return;
  const optionElements = listElement.querySelectorAll('[role="option"]');
  const index = Array.from(optionElements).indexOf(activeItemElement);
  const activeItem = items[index];
  const text = activeItem.text;
  const selected = activeItemElement.getAttribute('aria-selected') === 'true';
  return {
    index,
    text,
    selected
  };
};
async function announceText(text) {
  const liveRegion = document.querySelector('live-region');
  liveRegion === null || liveRegion === void 0 ? void 0 : liveRegion.clear(); // clear previous announcements

  await announce(text, {
    delayMs: 500,
    from: liveRegion ? liveRegion : undefined // announce will create a liveRegion if it doesn't find one
  });
}
const announceItemsChanged = debounce(async (items, listContainerRef) => {
  const liveRegion = document.querySelector('live-region');
  liveRegion === null || liveRegion === void 0 ? void 0 : liveRegion.clear(); // clear previous announcements

  // give @primer/behaviors a moment to update active-descendant
  await new Promise(resolve => window.requestAnimationFrame(resolve));
  const activeItem = getItemWithActiveDescendant(listContainerRef, items);
  if (!activeItem) return;
  const {
    index,
    text,
    selected
  } = activeItem;
  const announcementText = ['List updated', `Focused item: ${text}`, `${selected ? 'selected' : 'not selected'}`, `${index + 1} of ${items.length}`].join(', ');
  await announce(announcementText, {
    delayMs: 500,
    from: liveRegion ? liveRegion : undefined // announce will create a liveRegion if it doesn't find one
  });
}, 250);
async function announceFilterFocused() {
  await announceText('Focus on filter text box and list of items');
}
function FilteredActionList({
  loading = false,
  loadingType = FilteredActionListLoadingTypes.bodySpinner,
  placeholderText,
  filterValue: externalFilterValue,
  onFilterChange,
  onListContainerRefChanged,
  onInputRefChanged,
  items,
  textInputProps,
  inputRef: providedInputRef,
  sx,
  className,
  announcementsEnabled = false,
  ...listProps
}) {
  const [filterValue, setInternalFilterValue] = useProvidedStateOrCreate(externalFilterValue, undefined, '');
  const onInputChange = useCallback(e => {
    const value = e.target.value;
    onFilterChange(value, e);
    setInternalFilterValue(value);
  }, [onFilterChange, setInternalFilterValue]);
  const scrollContainerRef = useRef(null);
  const [listContainerElement, setListContainerElement] = useState(null);
  const inputRef = useProvidedRefOrCreate(providedInputRef);
  const [needItemsChangedAnnouncement, setNeedItemsChangedAnnouncement] = useState(false);
  const activeDescendantRef = useRef();
  const listId = useId();
  const inputDescriptionTextId = useId();
  const onInputKeyPress = useCallback(event => {
    if (event.key === 'Enter' && activeDescendantRef.current) {
      event.preventDefault();
      event.nativeEvent.stopImmediatePropagation();

      // Forward Enter key press to active descendant so that item gets activated
      const activeDescendantEvent = new KeyboardEvent(event.type, event.nativeEvent);
      activeDescendantRef.current.dispatchEvent(activeDescendantEvent);
    }
  }, [activeDescendantRef]);
  const listContainerRefCallback = useCallback(node => {
    setListContainerElement(node);
    onListContainerRefChanged === null || onListContainerRefChanged === void 0 ? void 0 : onListContainerRefChanged(node);
    if (needItemsChangedAnnouncement) {
      announceItemsChanged(items, {
        current: node
      });
      setNeedItemsChangedAnnouncement(false);
    }
  }, [items, needItemsChangedAnnouncement, onListContainerRefChanged]);
  useEffect(() => {
    onInputRefChanged === null || onInputRefChanged === void 0 ? void 0 : onInputRefChanged(inputRef);
  }, [inputRef, onInputRefChanged]);
  useFocusZone({
    containerRef: {
      current: listContainerElement
    },
    focusOutBehavior: 'wrap',
    focusableElementFilter: element => {
      return !(element instanceof HTMLInputElement);
    },
    activeDescendantFocus: inputRef,
    onActiveDescendantChanged: (current, previous, directlyActivated) => {
      activeDescendantRef.current = current;
      if (current && scrollContainerRef.current && directlyActivated) {
        scrollIntoView(current, scrollContainerRef.current, menuScrollMargins);
      }
    }
  }, [
  // List container isn't in the DOM while loading.  Need to re-bind focus zone when it changes.
  listContainerElement]);
  useEffect(() => {
    // if items changed, we want to instantly move active descendant into view
    if (activeDescendantRef.current && scrollContainerRef.current) {
      scrollIntoView(activeDescendantRef.current, scrollContainerRef.current, {
        ...menuScrollMargins,
        behavior: 'auto'
      });
    }
    if (announcementsEnabled) {
      if (listContainerElement) {
        announceItemsChanged(items, {
          current: listContainerElement
        });
      } else {
        setNeedItemsChangedAnnouncement(true);
      }
    }
    // eslint-disable-next-line react-compiler/react-compiler
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [items]);
  useScrollFlash(scrollContainerRef);
  return /*#__PURE__*/jsxs(Box, {
    display: "flex",
    flexDirection: "column",
    overflow: "hidden",
    flexGrow: 1,
    sx: sx,
    className: className,
    "data-testid": "filtered-action-list",
    children: [/*#__PURE__*/jsx(StyledHeader, {
      children: /*#__PURE__*/jsx(TextInput, {
        ref: inputRef,
        block: true,
        width: "auto",
        color: "fg.default",
        value: filterValue,
        onChange: onInputChange,
        onKeyPress: onInputKeyPress,
        placeholder: placeholderText,
        "aria-label": placeholderText,
        "aria-controls": listId,
        "aria-describedby": inputDescriptionTextId,
        loaderPosition: 'leading',
        loading: loading && !loadingType.appearsInBody,
        onFocus: announcementsEnabled ? announceFilterFocused : undefined,
        ...textInputProps
      })
    }), /*#__PURE__*/jsx(VisuallyHidden, {
      id: inputDescriptionTextId,
      children: "Items will be filtered as you type"
    }), /*#__PURE__*/jsx(Box, {
      ref: scrollContainerRef,
      overflow: "auto",
      flexGrow: 1,
      children: loading && scrollContainerRef.current && loadingType.appearsInBody ? /*#__PURE__*/jsx(FilteredActionListBodyLoader, {
        loadingType: loadingType,
        height: scrollContainerRef.current.clientHeight
      }) : /*#__PURE__*/jsx(ActionList, {
        ref: listContainerRefCallback,
        items: items,
        ...listProps,
        role: "listbox",
        id: listId
      })
    })]
  });
}
FilteredActionList.displayName = "FilteredActionList";
FilteredActionList.displayName = 'FilteredActionList';

export { FilteredActionList };
