'use strict';

var React = require('react');
var shared = require('./shared.js');
var _VisuallyHidden = require('../_VisuallyHidden.js');
var ActionListContainerContext = require('./ActionListContainerContext.js');
var invariant = require('../utils/invariant.js');
var clsx = require('clsx');
var Heading_module = require('./Heading.module.css.js');
var jsxRuntime = require('react/jsx-runtime');
var useRefObjectAsForwardedRef = require('../hooks/useRefObjectAsForwardedRef.js');
var Heading$1 = require('../Heading/Heading.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const Heading = /*#__PURE__*/React.forwardRef(({
  as,
  size,
  children,
  visuallyHidden = false,
  className,
  ...props
}, forwardedRef) => {
  var _props$id;
  const innerRef = React__default.default.useRef(null);
  useRefObjectAsForwardedRef.useRefObjectAsForwardedRef(forwardedRef, innerRef);
  const {
    headingId: headingId,
    variant: listVariant
  } = React__default.default.useContext(shared.ListContext);
  const {
    container
  } = React__default.default.useContext(ActionListContainerContext.ActionListContainerContext);

  // Semantic <menu>s don't have a place for headers within them, they should be aria-labelledby the menu button's name.
  !(container !== 'ActionMenu') ? process.env.NODE_ENV !== "production" ? invariant.invariant(false, `ActionList.Heading shouldn't be used within an ActionMenu container. Menus are labelled by the menu button's name.`) : invariant.invariant(false) : void 0;
  return /*#__PURE__*/jsxRuntime.jsx(_VisuallyHidden, {
    isVisible: !visuallyHidden,
    children: /*#__PURE__*/jsxRuntime.jsx(Heading$1, {
      as: as,
      variant: size,
      ref: innerRef
      // use custom id if it is provided. Otherwise, use the id from the context
      ,
      id: (_props$id = props.id) !== null && _props$id !== void 0 ? _props$id : headingId,
      className: clsx.clsx(className, Heading_module.ActionListHeader),
      "data-list-variant": listVariant,
      ...props,
      children: children
    })
  });
});
Heading.displayName = 'ActionList.Heading';

exports.Heading = Heading;
