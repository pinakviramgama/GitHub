'use strict';

var React = require('react');
var IconButton = require('../../Button/IconButton.js');
var Button = require('../../Button/Button.js');
var clsx = require('clsx');
var TextInputInnerAction_module = require('./TextInputInnerAction.module.css.js');
var jsxRuntime = require('react/jsx-runtime');
var Tooltip = require('../../TooltipV2/Tooltip.js');

const ConditionalTooltip = ({
  'aria-label': ariaLabel,
  children,
  tooltipDirection
}) => /*#__PURE__*/jsxRuntime.jsx(jsxRuntime.Fragment, {
  children: ariaLabel ? /*#__PURE__*/jsxRuntime.jsx(Tooltip.Tooltip, {
    text: ariaLabel,
    direction: tooltipDirection,
    className: TextInputInnerAction_module.ConditionalTooltip,
    children: children
  }) : children
});
const TextInputAction = /*#__PURE__*/React.forwardRef(({
  'aria-label': ariaLabel,
  'aria-labelledby': ariaLabelledBy,
  tooltipDirection,
  children,
  icon,
  sx: sxProp,
  className,
  variant = 'invisible',
  ...rest
}, forwardedRef) => {
  const styleProps = {
    className: clsx.clsx(variant === 'invisible' && TextInputInnerAction_module.Invisible, className),
    sx: sxProp || {}
  };
  if (icon && !ariaLabel || !children && !ariaLabel) {
    // eslint-disable-next-line no-console
    console.warn('Use the `aria-label` prop to provide an accessible label for assistive technology');
  }
  const accessibleLabel = ariaLabel ? {
    'aria-label': ariaLabel
  } : ariaLabelledBy ? {
    'aria-labelledby': ariaLabelledBy
  } : {
    'aria-label': ''
  };
  return /*#__PURE__*/jsxRuntime.jsx("span", {
    className: clsx.clsx('TextInput-action', TextInputInnerAction_module.TextInputAction),
    children: icon && !children && ariaLabel ? /*#__PURE__*/jsxRuntime.jsx(IconButton.IconButton, {
      ...accessibleLabel,
      tooltipDirection: tooltipDirection !== null && tooltipDirection !== void 0 ? tooltipDirection : 's',
      variant: variant,
      type: "button",
      icon: icon,
      size: "small",
      ...styleProps,
      ...rest,
      ref: forwardedRef
    }) : /*#__PURE__*/jsxRuntime.jsx(ConditionalTooltip, {
      "aria-label": ariaLabel,
      children: /*#__PURE__*/jsxRuntime.jsx(Button.ButtonComponent, {
        variant: variant,
        type: "button",
        ...styleProps,
        ...rest,
        ref: forwardedRef,
        children: children
      })
    })
  });
});

module.exports = TextInputAction;
