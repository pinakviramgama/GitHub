import React from 'react';
import type { SxProp } from '../sx';
type BranchNameProps<As extends React.ElementType> = {
    as?: As;
} & DistributiveOmit<React.ComponentPropsWithRef<React.ElementType extends As ? 'a' : As>, 'as'> & Omit<SxProp, 'sx'> & SxProp;
type DistributiveOmit<T, TOmitted extends PropertyKey> = T extends any ? Omit<T, TOmitted> : never;
export type { BranchNameProps };
declare const _default: <As extends React.ElementType>(props: {
    as?: As | undefined;
} & DistributiveOmit<React.ComponentPropsWithRef<React.ElementType<any, keyof React.JSX.IntrinsicElements> extends As ? "a" : As>, "as"> & Omit<SxProp, "sx"> & SxProp & React.RefAttributes<any>) => React.ReactNode;
export default _default;
//# sourceMappingURL=BranchName.d.ts.map