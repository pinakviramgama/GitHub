declare const HTMLElement: {
    new (): HTMLElement;
    prototype: HTMLElement;
};
export declare class TabContainerChangeEvent extends Event {
    #private;
    constructor(type: string, { tabIndex, tab, panel, ...init }: EventInit & {
        tabIndex?: number;
        tab?: Element;
        panel?: Element;
    });
    get detail(): {
        relatedTarget: Element | null;
    };
    get tabIndex(): number | null;
    get panel(): Element | null;
    get tab(): Element | null;
}
export declare class TabContainerElement extends HTMLElement {
    #private;
    static define(tag?: string, registry?: CustomElementRegistry): typeof TabContainerElement;
    get onChange(): ((event: TabContainerChangeEvent) => void) | null;
    set onChange(listener: ((event: TabContainerChangeEvent) => void) | null);
    get onTabContainerChange(): ((event: TabContainerChangeEvent) => void) | null;
    set onTabContainerChange(listener: ((event: TabContainerChangeEvent) => void) | null);
    get onTabContainerChanged(): ((event: TabContainerChangeEvent) => void) | null;
    set onTabContainerChanged(listener: ((event: TabContainerChangeEvent) => void) | null);
    get onChanged(): ((event: TabContainerChangeEvent) => void) | null;
    set onChanged(listener: ((event: TabContainerChangeEvent) => void) | null);
    static observedAttributes: string[];
    get activeTab(): HTMLElement;
    get activePanel(): HTMLElement;
    get vertical(): boolean;
    set vertical(isVertical: boolean);
    connectedCallback(): void;
    attributeChangedCallback(name: string): void;
    handleEvent(event: Event): void;
    get selectedTabIndex(): number;
    set selectedTabIndex(i: number);
    get defaultTabIndex(): number;
    set defaultTabIndex(index: number);
    selectTab(index: number): void;
}
export {};
