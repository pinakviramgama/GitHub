import { scrollIntoView, FocusKeys } from '@primer/behaviors';
import { useCallback, useRef, useState, useEffect } from 'react';
import styled from 'styled-components';
import { get } from '../constants.js';
import { ActionList } from '../ActionList/index.js';
import { useFocusZone } from '../hooks/useFocusZone.js';
import { useId } from '../hooks/useId.js';
import { useProvidedRefOrCreate } from '../hooks/useProvidedRefOrCreate.js';
import { useProvidedStateOrCreate } from '../hooks/useProvidedStateOrCreate.js';
import useScrollFlash from '../hooks/useScrollFlash.js';
import { FilteredActionListLoadingTypes, FilteredActionListBodyLoader } from './FilteredActionListLoaders.js';
import classes from './FilteredActionList.module.css.js';
import { isValidElementType } from 'react-is';
import { useAnnouncements } from './useAnnouncements.js';
import { clsx } from 'clsx';
import { jsxs, jsx } from 'react/jsx-runtime';
import Box from '../Box/Box.js';
import TextInput from '../TextInput/TextInput.js';
import { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden.js';

const menuScrollMargins = {
  startMargin: 0,
  endMargin: 8
};
const StyledHeader = styled.div.withConfig({
  displayName: "FilteredActionListWithModernActionList__StyledHeader",
  componentId: "sc-1d2kw5v-0"
})(["box-shadow:0 1px 0 ", ";z-index:1;"], get('colors.border.default'));
function FilteredActionList({
  loading = false,
  placeholderText,
  filterValue: externalFilterValue,
  loadingType = FilteredActionListLoadingTypes.bodySpinner,
  onFilterChange,
  onListContainerRefChanged,
  onInputRefChanged,
  items,
  textInputProps,
  inputRef: providedInputRef,
  sx,
  groupMetadata,
  showItemDividers,
  message,
  className,
  announcementsEnabled = true,
  fullScreenOnNarrow,
  ...listProps
}) {
  const [filterValue, setInternalFilterValue] = useProvidedStateOrCreate(externalFilterValue, undefined, '');
  const onInputChange = useCallback(e => {
    const value = e.target.value;
    onFilterChange(value, e);
    setInternalFilterValue(value);
  }, [onFilterChange, setInternalFilterValue]);
  const scrollContainerRef = useRef(null);
  const inputRef = useProvidedRefOrCreate(providedInputRef);
  const [listContainerElement, setListContainerElement] = useState(null);
  const activeDescendantRef = useRef();
  const listId = useId();
  const inputDescriptionTextId = useId();
  const onInputKeyPress = useCallback(event => {
    if (event.key === 'Enter' && activeDescendantRef.current) {
      event.preventDefault();
      event.nativeEvent.stopImmediatePropagation();

      // Forward Enter key press to active descendant so that item gets activated
      const activeDescendantEvent = new KeyboardEvent(event.type, event.nativeEvent);
      activeDescendantRef.current.dispatchEvent(activeDescendantEvent);
    }
  }, [activeDescendantRef]);
  const listContainerRefCallback = useCallback(node => {
    setListContainerElement(node);
    onListContainerRefChanged === null || onListContainerRefChanged === void 0 ? void 0 : onListContainerRefChanged(node);
  }, [onListContainerRefChanged]);
  useEffect(() => {
    onInputRefChanged === null || onInputRefChanged === void 0 ? void 0 : onInputRefChanged(inputRef);
  }, [inputRef, onInputRefChanged]);
  useFocusZone({
    containerRef: {
      current: listContainerElement
    },
    bindKeys: FocusKeys.ArrowVertical | FocusKeys.PageUpDown,
    focusOutBehavior: 'wrap',
    focusableElementFilter: element => {
      return !(element instanceof HTMLInputElement);
    },
    activeDescendantFocus: inputRef,
    onActiveDescendantChanged: (current, previous, directlyActivated) => {
      activeDescendantRef.current = current;
      if (current && scrollContainerRef.current && directlyActivated) {
        scrollIntoView(current, scrollContainerRef.current, menuScrollMargins);
      }
    }
  }, [
  // List container isn't in the DOM while loading.  Need to re-bind focus zone when it changes.
  listContainerElement]);
  useEffect(() => {
    // if items changed, we want to instantly move active descendant into view
    if (activeDescendantRef.current && scrollContainerRef.current) {
      scrollIntoView(activeDescendantRef.current, scrollContainerRef.current, {
        ...menuScrollMargins,
        behavior: 'auto'
      });
    }
  }, [items]);
  useAnnouncements(items, {
    current: listContainerElement
  }, inputRef, announcementsEnabled, loading);
  useScrollFlash(scrollContainerRef);
  function getItemListForEachGroup(groupId) {
    const itemsInGroup = [];
    for (const item of items) {
      // Look up the group associated with the current item.
      if (item.groupId === groupId) {
        itemsInGroup.push(item);
      }
    }
    return itemsInGroup;
  }
  function getBodyContent() {
    if (loading && scrollContainerRef.current && loadingType.appearsInBody) {
      return /*#__PURE__*/jsx(FilteredActionListBodyLoader, {
        loadingType: loadingType,
        height: scrollContainerRef.current.clientHeight
      });
    }
    if (message) {
      return message;
    }
    return /*#__PURE__*/jsx(ActionList, {
      ref: listContainerRefCallback,
      showDividers: showItemDividers,
      ...listProps,
      role: "listbox",
      id: listId,
      sx: {
        flexGrow: 1
      },
      children: groupMetadata !== null && groupMetadata !== void 0 && groupMetadata.length ? groupMetadata.map((group, index) => {
        var _group$header, _group$header2;
        return /*#__PURE__*/jsxs(ActionList.Group, {
          children: [/*#__PURE__*/jsx(ActionList.GroupHeading, {
            variant: (_group$header = group.header) !== null && _group$header !== void 0 && _group$header.variant ? group.header.variant : undefined,
            children: (_group$header2 = group.header) !== null && _group$header2 !== void 0 && _group$header2.title ? group.header.title : `Group ${group.groupId}`
          }), getItemListForEachGroup(group.groupId).map(({
            key: itemKey,
            ...item
          }, index) => {
            var _ref, _item$id;
            const key = (_ref = itemKey !== null && itemKey !== void 0 ? itemKey : (_item$id = item.id) === null || _item$id === void 0 ? void 0 : _item$id.toString()) !== null && _ref !== void 0 ? _ref : index.toString();
            return /*#__PURE__*/jsx(MappedActionListItem, {
              ...item,
              renderItem: listProps.renderItem
            }, key);
          })]
        }, index);
      }) : items.map(({
        key: itemKey,
        ...item
      }, index) => {
        var _ref2, _item$id2;
        const key = (_ref2 = itemKey !== null && itemKey !== void 0 ? itemKey : (_item$id2 = item.id) === null || _item$id2 === void 0 ? void 0 : _item$id2.toString()) !== null && _ref2 !== void 0 ? _ref2 : index.toString();
        return /*#__PURE__*/jsx(MappedActionListItem, {
          ...item,
          renderItem: listProps.renderItem
        }, key);
      })
    });
  }
  return /*#__PURE__*/jsxs(Box, {
    display: "flex",
    flexDirection: "column",
    overflow: "hidden",
    sx: sx,
    className: className,
    "data-testid": "filtered-action-list",
    children: [/*#__PURE__*/jsx(StyledHeader, {
      children: /*#__PURE__*/jsx(TextInput, {
        ref: inputRef,
        block: true,
        width: "auto",
        color: "fg.default",
        value: filterValue,
        onChange: onInputChange,
        onKeyPress: onInputKeyPress,
        placeholder: placeholderText,
        role: "combobox",
        "aria-expanded": "true",
        "aria-autocomplete": "list",
        "aria-controls": listId,
        "aria-label": placeholderText,
        "aria-describedby": inputDescriptionTextId,
        loaderPosition: 'leading',
        loading: loading && !loadingType.appearsInBody,
        className: clsx(textInputProps === null || textInputProps === void 0 ? void 0 : textInputProps.className, fullScreenOnNarrow && classes.FullScreenTextInput),
        ...textInputProps
      })
    }), /*#__PURE__*/jsx(VisuallyHidden, {
      id: inputDescriptionTextId,
      children: "Items will be filtered as you type"
    }), /*#__PURE__*/jsx("div", {
      ref: scrollContainerRef,
      className: classes.Container,
      children: getBodyContent()
    })]
  });
}
FilteredActionList.displayName = "FilteredActionList";
function MappedActionListItem(item) {
  // keep backward compatibility for renderItem
  // escape hatch for custom Item rendering
  if (typeof item.renderItem === 'function') return item.renderItem(item);
  const {
    id,
    description,
    descriptionVariant,
    text,
    trailingVisual: TrailingVisual,
    leadingVisual: LeadingVisual,
    trailingText,
    trailingIcon: TrailingIcon,
    onAction,
    children,
    ...rest
  } = item;
  return /*#__PURE__*/jsxs(ActionList.Item, {
    role: "option"
    // @ts-ignore - for now
    ,
    onSelect: e => {
      if (typeof onAction === 'function') onAction(item, e);
    },
    "data-id": id,
    ...rest,
    children: [LeadingVisual ? /*#__PURE__*/jsx(ActionList.LeadingVisual, {
      children: /*#__PURE__*/jsx(LeadingVisual, {})
    }) : null, children, text, description ? /*#__PURE__*/jsx(ActionList.Description, {
      variant: descriptionVariant,
      children: description
    }) : null, TrailingVisual ? /*#__PURE__*/jsx(ActionList.TrailingVisual, {
      children: typeof TrailingVisual !== 'string' && isValidElementType(TrailingVisual) ? /*#__PURE__*/jsx(TrailingVisual, {}) : TrailingVisual
    }) : TrailingIcon || trailingText ? /*#__PURE__*/jsxs(ActionList.TrailingVisual, {
      children: [trailingText, TrailingIcon && /*#__PURE__*/jsx(TrailingIcon, {})]
    }) : null]
  });
}
MappedActionListItem.displayName = "MappedActionListItem";
FilteredActionList.displayName = 'FilteredActionList';

export { FilteredActionList };
