'use strict';

var React = require('react');
var Sequence = require('./components/Sequence.js');
var KeybindingHint_module = require('./KeybindingHint.module.css.js');
var clsx = require('clsx');
var jsxRuntime = require('react/jsx-runtime');
var Text = require('../Text/Text.js');

const Kbd = ({
  children,
  className
}) => {
  return /*#__PURE__*/jsxRuntime.jsx(Text, {
    as: 'kbd',
    className: clsx.clsx(className, KeybindingHint_module.KeybindingHint),
    "data-testid": "keybinding-hint",
    children: children
  });
};
Kbd.displayName = "Kbd";
/** Indicates the presence of an available keybinding. */
// KeybindingHint is a good candidate for memoizing since props will rarely change
const KeybindingHint = /*#__PURE__*/React.memo(({
  className,
  ...props
}) => /*#__PURE__*/jsxRuntime.jsx(Kbd, {
  className: className,
  children: /*#__PURE__*/jsxRuntime.jsx(Sequence.Sequence, {
    ...props
  })
}));
KeybindingHint.displayName = 'KeybindingHint';

/**
 * AVOID: `KeybindingHint` is nearly always sufficient for providing both visible and accessible keyboard hints.
 * However, there may be cases where we need a plain string version, such as when building `aria-label` or
 * `aria-description`. In that case, this plain string builder can be used instead.
 *
 * NOTE that this string should _only_ be used when building `aria-label` or `aria-description` props (never rendered
 * visibly) and should nearly always also be paired with a visible hint for sighted users.
 */
const getAccessibleKeybindingHintString = Sequence.accessibleSequenceString;

exports.KeybindingHint = KeybindingHint;
exports.getAccessibleKeybindingHintString = getAccessibleKeybindingHintString;
