import { memo } from 'react';
import { accessibleSequenceString, Sequence } from './components/Sequence.js';
import classes from './KeybindingHint.module.css.js';
import { clsx } from 'clsx';
import { jsx } from 'react/jsx-runtime';
import Text from '../Text/Text.js';

const Kbd = ({
  children,
  className
}) => {
  return /*#__PURE__*/jsx(Text, {
    as: 'kbd',
    className: clsx(className, classes.KeybindingHint),
    "data-testid": "keybinding-hint",
    children: children
  });
};
Kbd.displayName = "Kbd";
/** Indicates the presence of an available keybinding. */
// KeybindingHint is a good candidate for memoizing since props will rarely change
const KeybindingHint = /*#__PURE__*/memo(({
  className,
  ...props
}) => /*#__PURE__*/jsx(Kbd, {
  className: className,
  children: /*#__PURE__*/jsx(Sequence, {
    ...props
  })
}));
KeybindingHint.displayName = 'KeybindingHint';

/**
 * AVOID: `KeybindingHint` is nearly always sufficient for providing both visible and accessible keyboard hints.
 * However, there may be cases where we need a plain string version, such as when building `aria-label` or
 * `aria-description`. In that case, this plain string builder can be used instead.
 *
 * NOTE that this string should _only_ be used when building `aria-label` or `aria-description` props (never rendered
 * visibly) and should nearly always also be paired with a visible hint for sighted users.
 */
const getAccessibleKeybindingHintString = accessibleSequenceString;

export { KeybindingHint, getAccessibleKeybindingHintString };
