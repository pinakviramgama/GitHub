'use strict';

var React = require('react');
var reactIs = require('react-is');
var defaultSxProp = require('../../utils/defaultSxProp.js');
var UnderlineTabbedInterface_module = require('./UnderlineTabbedInterface.module.css.js');
var clsx = require('clsx');
var BoxWithFallback = require('./BoxWithFallback.js');
var jsxRuntime = require('react/jsx-runtime');
var CounterLabel = require('../../CounterLabel/CounterLabel.js');

// Used for UnderlineNav and UnderlinePanels components

const GAP = 8;
const UnderlineWrapper = /*#__PURE__*/React.forwardRef(({
  children,
  className,
  sx: sxProp = defaultSxProp.defaultSxProp,
  ...rest
}, forwardedRef) => {
  return /*#__PURE__*/jsxRuntime.jsx(BoxWithFallback.BoxWithFallback, {
    className: clsx.clsx(UnderlineTabbedInterface_module.UnderlineWrapper, className),
    ref: forwardedRef,
    sx: sxProp,
    ...rest,
    children: children
  });
});
const UnderlineItemList = /*#__PURE__*/React.forwardRef(({
  children,
  ...rest
}, forwardedRef) => {
  return /*#__PURE__*/jsxRuntime.jsx("ul", {
    className: UnderlineTabbedInterface_module.UnderlineItemList,
    ref: forwardedRef,
    ...rest,
    children: children
  });
});
const LoadingCounter = () => {
  return /*#__PURE__*/jsxRuntime.jsx("span", {
    className: UnderlineTabbedInterface_module.LoadingCounter
  });
};
LoadingCounter.displayName = "LoadingCounter"; // We can uncomment these when/if we add overflow behavior
// to the UnderlinePanels component
//
// export const StyledMoreButton = styled(Button)`
//   margin: 0;
//   border: 0;
//   background: transparent;
//   font-weight: normal;
//   box-shadow: none;
//   padding-block: var(--control-small-paddingBlock);
//   padding-inline: var(--control-small-paddingInline-condensed);
//   > span[data-component='trailingVisual'] {
//     margin-left: 0;
//   }
// `
// export const StyledOverflowDivider = styled.span`
//   display: inline-block;
//   border-left: 1px solid var(--borderColor-muted);
//   width: 1px;
//   margin-right: var(--control-xsmall-gap);
//   /* The height of the divider - reference from Figma */
//   height: 24px;
// `
// export const StyledMoreMenuListItem = styled.li`
//   display: flex;
//   align-items: center;
//   height: 45px;
// `
const UnderlineItem = /*#__PURE__*/React.forwardRef(({
  as = 'a',
  children,
  counter,
  icon: Icon,
  iconsVisible,
  loadingCounters,
  sx: sxProp = defaultSxProp.defaultSxProp,
  className,
  ...rest
}, forwardedRef) => {
  return /*#__PURE__*/jsxRuntime.jsxs(BoxWithFallback.BoxWithFallback, {
    ref: forwardedRef,
    as: as,
    sx: sxProp,
    className: clsx.clsx(UnderlineTabbedInterface_module.UnderlineItem, className),
    ...rest,
    children: [iconsVisible && Icon && /*#__PURE__*/jsxRuntime.jsx("span", {
      "data-component": "icon",
      children: reactIs.isElement(Icon) ? Icon : /*#__PURE__*/jsxRuntime.jsx(Icon, {})
    }), children && /*#__PURE__*/jsxRuntime.jsx("span", {
      "data-component": "text",
      "data-content": children,
      children: children
    }), counter !== undefined ? loadingCounters ? /*#__PURE__*/jsxRuntime.jsx("span", {
      "data-component": "counter",
      children: /*#__PURE__*/jsxRuntime.jsx(LoadingCounter, {})
    }) : /*#__PURE__*/jsxRuntime.jsx("span", {
      "data-component": "counter",
      children: /*#__PURE__*/jsxRuntime.jsx(CounterLabel, {
        children: counter
      })
    }) : null]
  });
});

exports.GAP = GAP;
exports.LoadingCounter = LoadingCounter;
exports.UnderlineItem = UnderlineItem;
exports.UnderlineItemList = UnderlineItemList;
exports.UnderlineWrapper = UnderlineWrapper;
